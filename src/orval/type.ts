/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Titan API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AddBrowsingHistoryCommand,
  AddUserFavouriteCommand,
  AddressDto,
  AdminAdvertisementDto,
  AdminListingDto,
  AdminListingDtoPagedResult,
  AdministratorDetailDto,
  AdministratorDetailDtoPagedResult,
  AdvertisementCategoryDto,
  AdvertisementCategoryDtoDataResponseDto,
  AdvertisementCategoryDtoPagedResult,
  AdvertisementDto,
  AdvertisementDtoDataResponseDto,
  AdvertisementDtoPagedResult,
  AdvertisementMediaDto,
  AdvertisementMediaDtoDataResponseDto,
  AdvertisementMediaDtoPagedResult,
  AppointmentDto,
  AppointmentDtoDataResponseDto,
  AppointmentDtoPagedResult,
  AssignUserRoleCommand,
  AuthenticationResponseDto,
  AuthenticationResponseDtoDataResponseDto,
  BrowsingHistoryDtoDataResponseDto,
  BrowsingHistoryDtoPagedResult,
  BusinessAffiliateDetailDto,
  BusinessAffiliateDetailDtoPagedResult,
  ChangePasswordDto,
  CollaboratorDto,
  CreateBuyRentRequestCommand,
  CreateCollaboratorRequestCommand,
  CreateDealerRequestCommand,
  CreateEnquiryCommand,
  CreateInsuranceRequestCommand,
  CreateListingTagCommand,
  CreateRequestLogCommand,
  CreateSellRentRequestCommand,
  DeleteAccountCommand,
  DistributorDetailDto,
  DistributorDetailDtoPagedResult,
  DistributorSummaryDto,
  DistributorSummaryDtoPagedResult,
  EmailDataDto,
  EmailExistsRequestDto,
  EmailExistsResponseDto,
  FAQCategory,
  FAQDto,
  FilterDtoDataResponseDto,
  ForgotPasswordRequestDto,
  GenerateOtpForRegistrationDto,
  GetApiAdminAddressParams,
  GetApiAdminAdministratorParams,
  GetApiAdminAdvertisementMediaParams,
  GetApiAdminAppointmentBusinessAffiliateParams,
  GetApiAdminAppointmentParams,
  GetApiAdminAppointmentRequestParams,
  GetApiAdminBusinessAffiliateParams,
  GetApiAdminCollaboratorParams,
  GetApiAdminDistributorParams,
  GetApiAdminIndustryParams,
  GetApiAdminListingMediaListingParams,
  GetApiAdminListingMediaParams,
  GetApiAdminListingParams,
  GetApiAdminMachineMediaMachineParams,
  GetApiAdminMachineMediaParams,
  GetApiAdminRequestBuyRentParams,
  GetApiAdminRequestCollaboratorParams,
  GetApiAdminRequestDealerParams,
  GetApiAdminRequestEnquiryParams,
  GetApiAdminRequestInsuranceParams,
  GetApiAdminRequestLogMediaParams,
  GetApiAdminRequestLogMediaRequestLogParams,
  GetApiAdminRequestLogParams,
  GetApiAdminRequestParams,
  GetApiAdminRequestSellRentParams,
  GetApiAdminTagParams,
  GetApiAdminUserParams,
  GetApiAdvertisementCategoryParams,
  GetApiAdvertisementParams,
  GetApiAppointmentParams,
  GetApiAppointmentRequestParams,
  GetApiBrowsingHistoryParams,
  GetApiBusinessAffiliateAppointmentParams,
  GetApiDistributorParams,
  GetApiListingParams,
  GetApiListingTagListingsParams,
  GetApiListingTagTagsParams,
  GetApiMachineMakeParams,
  GetApiMachineParams,
  GetApiMachineTypeParams,
  GetApiNotificationParams,
  GetApiPurchaseParams,
  GetApiRequestParams,
  GetApiUserFavouriteParams,
  GetSasUrlForUploadAdministratorMediaQuery,
  GetSasUrlForUploadAdvertisementMediaQuery,
  GetSasUrlForUploadBusinessAffiliateMediaQuery,
  GetSasUrlForUploadDistributorMediaQuery,
  GetSasUrlForUploadListingMediaQuery,
  GetSasUrlForUploadMachineMakeLogoQuery,
  GetSasUrlForUploadMachineTypeIconQuery,
  GetSasUrlForUploadProfilePictureQuery,
  GetSasUrlForUploadRequestLogMediaQuery,
  IndustryDto,
  ListingDto,
  ListingDtoDataResponseDto,
  ListingDtoPagedResult,
  ListingMediaDto,
  ListingMediaDtoDataResponseDto,
  ListingMediaDtoPagedResult,
  ListingTagDto,
  LoginDto,
  MachineDto,
  MachineDtoDataResponseDto,
  MachineDtoPagedResult,
  MachineMakeDto,
  MachineMediaDto,
  MachineMediaDtoDataResponseDto,
  MachineMediaDtoPagedResult,
  MachineTypeDto,
  NotificationDtoPagedResult,
  NotificationRequestDto,
  PhoneNumberExistsRequestDto,
  PhoneNumberExistsResponseDto,
  PurchaseDto,
  PurchaseDtoPagedResult,
  RegisterDto,
  RequestDto,
  RequestDtoDataResponseDto,
  RequestDtoPagedResult,
  RequestLogDto,
  RequestLogDtoPagedResult,
  RequestLogMediaDto,
  RequestLogMediaDtoDataResponseDto,
  RequestLogMediaDtoPagedResult,
  ResetPasswordRequestDto,
  ResponseDto,
  SasUploadMediaDto,
  TagDto,
  TagDtoPagedResult,
  TokenDto,
  TopicNotificationRequestDto,
  UnassignUserRoleCommand,
  UpdateBusinessAffiliateCommand,
  UpdateDistributorCommand,
  UpdateUserProfileCommand,
  UpsertAddressCommand,
  UpsertAdministratorCommand,
  UpsertAdvertisementCategoryCommand,
  UpsertAdvertisementCommand,
  UpsertAdvertisementMediaCommand,
  UpsertAppointmentCommand,
  UpsertBusinessAffiliateCommand,
  UpsertCollaboratorCommand,
  UpsertDistributorCommand,
  UpsertFAQCommand,
  UpsertIndustryCommand,
  UpsertListingCommand,
  UpsertListingMediaCommand,
  UpsertMachineCommand,
  UpsertMachineMakeCommand,
  UpsertMachineMediaCommand,
  UpsertMachineTypeCommand,
  UpsertRequestLogMediaCommand,
  UpsertTagCommand,
  UserDto,
  UserDtoPagedResult,
  UserFavouriteDtoDataResponseDto,
  UserFavouriteDtoPagedResult,
  UserProfileDtoDataResponseDto,
  VerifyOtpDto
} from './type.schemas'



export const postApiAdminAddress = (
    upsertAddressCommand: UpsertAddressCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/admin/Address`,
      upsertAddressCommand,options
    );
  }



export const getPostApiAdminAddressMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAddress>>, TError,{data: UpsertAddressCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAddress>>, TError,{data: UpsertAddressCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAddress>>, {data: UpsertAddressCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAddress(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAddressMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAddress>>>
    export type PostApiAdminAddressMutationBody = UpsertAddressCommand
    export type PostApiAdminAddressMutationError = AxiosError<unknown>

    export const usePostApiAdminAddress = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAddress>>, TError,{data: UpsertAddressCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAddress>>,
        TError,
        {data: UpsertAddressCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAddress = (
    params?: GetApiAdminAddressParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddressDto[]>> => {
    
    return axios.get(
      `/api/admin/Address`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminAddressQueryKey = (params?: GetApiAdminAddressParams,) => {
    return [`/api/admin/Address`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminAddressQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAddress>>, TError = AxiosError<unknown>>(params?: GetApiAdminAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddress>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAddressQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAddress>>> = ({ signal }) => getApiAdminAddress(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAddress>>>
export type GetApiAdminAddressQueryError = AxiosError<unknown>


export function useGetApiAdminAddress<TData = Awaited<ReturnType<typeof getApiAdminAddress>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminAddressParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAddress>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAddress<TData = Awaited<ReturnType<typeof getApiAdminAddress>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAddress>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAddress<TData = Awaited<ReturnType<typeof getApiAdminAddress>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddress>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAddress<TData = Awaited<ReturnType<typeof getApiAdminAddress>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddress>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAddressQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminAddressId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddressDto>> => {
    
    return axios.get(
      `/api/admin/Address/${id}`,options
    );
  }


export const getGetApiAdminAddressIdQueryKey = (id: string,) => {
    return [`/api/admin/Address/${id}`] as const;
    }

    
export const getGetApiAdminAddressIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAddressId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddressId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAddressIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAddressId>>> = ({ signal }) => getApiAdminAddressId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddressId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAddressIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAddressId>>>
export type GetApiAdminAddressIdQueryError = AxiosError<unknown>


export function useGetApiAdminAddressId<TData = Awaited<ReturnType<typeof getApiAdminAddressId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddressId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAddressId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAddressId<TData = Awaited<ReturnType<typeof getApiAdminAddressId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddressId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAddressId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAddressId<TData = Awaited<ReturnType<typeof getApiAdminAddressId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddressId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAddressId<TData = Awaited<ReturnType<typeof getApiAdminAddressId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAddressId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAddressIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminAddressId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Address/${id}`,options
    );
  }



export const getDeleteApiAdminAddressIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAddressId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAddressId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminAddressId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminAddressId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminAddressIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminAddressId>>>
    
    export type DeleteApiAdminAddressIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminAddressId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAddressId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminAddressId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminAddressIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminAdministrator = (
    upsertAdministratorCommand: UpsertAdministratorCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdministratorDetailDto>> => {
    
    return axios.post(
      `/api/admin/Administrator`,
      upsertAdministratorCommand,options
    );
  }



export const getPostApiAdminAdministratorMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdministrator>>, TError,{data: UpsertAdministratorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdministrator>>, TError,{data: UpsertAdministratorCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAdministrator>>, {data: UpsertAdministratorCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAdministrator(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAdministratorMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAdministrator>>>
    export type PostApiAdminAdministratorMutationBody = UpsertAdministratorCommand
    export type PostApiAdminAdministratorMutationError = AxiosError<unknown>

    export const usePostApiAdminAdministrator = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdministrator>>, TError,{data: UpsertAdministratorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAdministrator>>,
        TError,
        {data: UpsertAdministratorCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAdministratorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAdministrator = (
    params?: GetApiAdminAdministratorParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdministratorDetailDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Administrator`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminAdministratorQueryKey = (params?: GetApiAdminAdministratorParams,) => {
    return [`/api/admin/Administrator`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminAdministratorQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError = AxiosError<unknown>>(params?: GetApiAdminAdministratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAdministratorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAdministrator>>> = ({ signal }) => getApiAdminAdministrator(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAdministratorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAdministrator>>>
export type GetApiAdminAdministratorQueryError = AxiosError<unknown>


export function useGetApiAdminAdministrator<TData = Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminAdministratorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdministrator>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdministrator<TData = Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAdministratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdministrator>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdministrator<TData = Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAdministratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAdministrator<TData = Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAdministratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministrator>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAdministratorQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminAdministratorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdministratorDetailDto>> => {
    
    return axios.get(
      `/api/admin/Administrator/${id}`,options
    );
  }


export const getGetApiAdminAdministratorIdQueryKey = (id: string,) => {
    return [`/api/admin/Administrator/${id}`] as const;
    }

    
export const getGetApiAdminAdministratorIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAdministratorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAdministratorId>>> = ({ signal }) => getApiAdminAdministratorId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAdministratorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAdministratorId>>>
export type GetApiAdminAdministratorIdQueryError = AxiosError<unknown>


export function useGetApiAdminAdministratorId<TData = Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdministratorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdministratorId<TData = Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdministratorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdministratorId<TData = Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAdministratorId<TData = Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdministratorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAdministratorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminAdministratorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Administrator/${id}`,options
    );
  }



export const getDeleteApiAdminAdministratorIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdministratorId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdministratorId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminAdministratorId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminAdministratorId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminAdministratorIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminAdministratorId>>>
    
    export type DeleteApiAdminAdministratorIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminAdministratorId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdministratorId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminAdministratorId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminAdministratorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminAdministratorSasUrlForUpload = (
    getSasUrlForUploadAdministratorMediaQuery: GetSasUrlForUploadAdministratorMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/Administrator/SasUrlForUpload`,
      getSasUrlForUploadAdministratorMediaQuery,options
    );
  }



export const getPostApiAdminAdministratorSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdministratorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadAdministratorMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdministratorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadAdministratorMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAdministratorSasUrlForUpload>>, {data: GetSasUrlForUploadAdministratorMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAdministratorSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAdministratorSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAdministratorSasUrlForUpload>>>
    export type PostApiAdminAdministratorSasUrlForUploadMutationBody = GetSasUrlForUploadAdministratorMediaQuery
    export type PostApiAdminAdministratorSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminAdministratorSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdministratorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadAdministratorMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAdministratorSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadAdministratorMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAdministratorSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdvertisement = (
    params?: GetApiAdvertisementParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementDtoPagedResult>> => {
    
    return axios.get(
      `/api/Advertisement`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdvertisementQueryKey = (params?: GetApiAdvertisementParams,) => {
    return [`/api/Advertisement`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdvertisementQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdvertisement>>, TError = AxiosError<unknown>>(params?: GetApiAdvertisementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisement>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdvertisementQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdvertisement>>> = ({ signal }) => getApiAdvertisement(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdvertisementQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdvertisement>>>
export type GetApiAdvertisementQueryError = AxiosError<unknown>


export function useGetApiAdvertisement<TData = Awaited<ReturnType<typeof getApiAdvertisement>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdvertisementParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisement>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisement<TData = Awaited<ReturnType<typeof getApiAdvertisement>>, TError = AxiosError<unknown>>(
 params?: GetApiAdvertisementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisement>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisement<TData = Awaited<ReturnType<typeof getApiAdvertisement>>, TError = AxiosError<unknown>>(
 params?: GetApiAdvertisementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisement>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdvertisement<TData = Awaited<ReturnType<typeof getApiAdvertisement>>, TError = AxiosError<unknown>>(
 params?: GetApiAdvertisementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisement>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdvertisementQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdvertisementId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementDto>> => {
    
    return axios.get(
      `/api/Advertisement/${id}`,options
    );
  }


export const getGetApiAdvertisementIdQueryKey = (id: string,) => {
    return [`/api/Advertisement/${id}`] as const;
    }

    
export const getGetApiAdvertisementIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdvertisementId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdvertisementIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdvertisementId>>> = ({ signal }) => getApiAdvertisementId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdvertisementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdvertisementId>>>
export type GetApiAdvertisementIdQueryError = AxiosError<unknown>


export function useGetApiAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisementId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisementId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdvertisementIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminAdvertisement = (
    upsertAdvertisementCommand: UpsertAdvertisementCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/Advertisement`,
      upsertAdvertisementCommand,options
    );
  }



export const getPostApiAdminAdvertisementMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisement>>, TError,{data: UpsertAdvertisementCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisement>>, TError,{data: UpsertAdvertisementCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAdvertisement>>, {data: UpsertAdvertisementCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAdvertisement(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAdvertisement>>>
    export type PostApiAdminAdvertisementMutationBody = UpsertAdvertisementCommand
    export type PostApiAdminAdvertisementMutationError = AxiosError<unknown>

    export const usePostApiAdminAdvertisement = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisement>>, TError,{data: UpsertAdvertisementCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAdvertisement>>,
        TError,
        {data: UpsertAdvertisementCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAdvertisementMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAdvertisementId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminAdvertisementDto>> => {
    
    return axios.get(
      `/api/admin/Advertisement/${id}`,options
    );
  }


export const getGetApiAdminAdvertisementIdQueryKey = (id: string,) => {
    return [`/api/admin/Advertisement/${id}`] as const;
    }

    
export const getGetApiAdminAdvertisementIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAdvertisementIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>> = ({ signal }) => getApiAdminAdvertisementId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAdvertisementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>>
export type GetApiAdminAdvertisementIdQueryError = AxiosError<unknown>


export function useGetApiAdminAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAdvertisementIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminAdvertisementId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Advertisement/${id}`,options
    );
  }



export const getDeleteApiAdminAdvertisementIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminAdvertisementId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminAdvertisementId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminAdvertisementIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminAdvertisementId>>>
    
    export type DeleteApiAdminAdvertisementIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminAdvertisementId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminAdvertisementId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminAdvertisementIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdvertisementCategory = (
    params?: GetApiAdvertisementCategoryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementCategoryDtoPagedResult>> => {
    
    return axios.get(
      `/api/AdvertisementCategory`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdvertisementCategoryQueryKey = (params?: GetApiAdvertisementCategoryParams,) => {
    return [`/api/AdvertisementCategory`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdvertisementCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError = AxiosError<unknown>>(params?: GetApiAdvertisementCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdvertisementCategoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdvertisementCategory>>> = ({ signal }) => getApiAdvertisementCategory(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdvertisementCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdvertisementCategory>>>
export type GetApiAdvertisementCategoryQueryError = AxiosError<unknown>


export function useGetApiAdvertisementCategory<TData = Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdvertisementCategoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisementCategory>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisementCategory<TData = Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError = AxiosError<unknown>>(
 params?: GetApiAdvertisementCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisementCategory>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisementCategory<TData = Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError = AxiosError<unknown>>(
 params?: GetApiAdvertisementCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdvertisementCategory<TData = Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError = AxiosError<unknown>>(
 params?: GetApiAdvertisementCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategory>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdvertisementCategoryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdvertisementCategoryId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementCategoryDto>> => {
    
    return axios.get(
      `/api/AdvertisementCategory/${id}`,options
    );
  }


export const getGetApiAdvertisementCategoryIdQueryKey = (id: string,) => {
    return [`/api/AdvertisementCategory/${id}`] as const;
    }

    
export const getGetApiAdvertisementCategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdvertisementCategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>> = ({ signal }) => getApiAdvertisementCategoryId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdvertisementCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>>
export type GetApiAdvertisementCategoryIdQueryError = AxiosError<unknown>


export function useGetApiAdvertisementCategoryId<TData = Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisementCategoryId<TData = Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdvertisementCategoryId<TData = Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdvertisementCategoryId<TData = Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdvertisementCategoryId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdvertisementCategoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminAdvertisementCategory = (
    upsertAdvertisementCategoryCommand: UpsertAdvertisementCategoryCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementCategoryDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/AdvertisementCategory`,
      upsertAdvertisementCategoryCommand,options
    );
  }



export const getPostApiAdminAdvertisementCategoryMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementCategory>>, TError,{data: UpsertAdvertisementCategoryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementCategory>>, TError,{data: UpsertAdvertisementCategoryCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAdvertisementCategory>>, {data: UpsertAdvertisementCategoryCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAdvertisementCategory(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAdvertisementCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAdvertisementCategory>>>
    export type PostApiAdminAdvertisementCategoryMutationBody = UpsertAdvertisementCategoryCommand
    export type PostApiAdminAdvertisementCategoryMutationError = AxiosError<unknown>

    export const usePostApiAdminAdvertisementCategory = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementCategory>>, TError,{data: UpsertAdvertisementCategoryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAdvertisementCategory>>,
        TError,
        {data: UpsertAdvertisementCategoryCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAdvertisementCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAdminAdvertisementCategoryId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/AdvertisementCategory/${id}`,options
    );
  }



export const getDeleteApiAdminAdvertisementCategoryIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementCategoryId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementCategoryId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminAdvertisementCategoryId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminAdvertisementCategoryId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminAdvertisementCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminAdvertisementCategoryId>>>
    
    export type DeleteApiAdminAdvertisementCategoryIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminAdvertisementCategoryId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementCategoryId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminAdvertisementCategoryId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminAdvertisementCategoryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminAdvertisementMedia = (
    upsertAdvertisementMediaCommand: UpsertAdvertisementMediaCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementMediaDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/AdvertisementMedia`,
      upsertAdvertisementMediaCommand,options
    );
  }



export const getPostApiAdminAdvertisementMediaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementMedia>>, TError,{data: UpsertAdvertisementMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementMedia>>, TError,{data: UpsertAdvertisementMediaCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAdvertisementMedia>>, {data: UpsertAdvertisementMediaCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAdvertisementMedia(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAdvertisementMediaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAdvertisementMedia>>>
    export type PostApiAdminAdvertisementMediaMutationBody = UpsertAdvertisementMediaCommand
    export type PostApiAdminAdvertisementMediaMutationError = AxiosError<unknown>

    export const usePostApiAdminAdvertisementMedia = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementMedia>>, TError,{data: UpsertAdvertisementMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAdvertisementMedia>>,
        TError,
        {data: UpsertAdvertisementMediaCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAdvertisementMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAdvertisementMedia = (
    params?: GetApiAdminAdvertisementMediaParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/AdvertisementMedia`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminAdvertisementMediaQueryKey = (params?: GetApiAdminAdvertisementMediaParams,) => {
    return [`/api/admin/AdvertisementMedia`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminAdvertisementMediaQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError = AxiosError<unknown>>(params?: GetApiAdminAdvertisementMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAdvertisementMediaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>> = ({ signal }) => getApiAdminAdvertisementMedia(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAdvertisementMediaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>>
export type GetApiAdminAdvertisementMediaQueryError = AxiosError<unknown>


export function useGetApiAdminAdvertisementMedia<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminAdvertisementMediaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementMedia<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAdvertisementMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementMedia<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAdvertisementMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAdvertisementMedia<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAdvertisementMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAdvertisementMediaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminAdvertisementMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementMediaDto>> => {
    
    return axios.get(
      `/api/admin/AdvertisementMedia/${id}`,options
    );
  }


export const getGetApiAdminAdvertisementMediaIdQueryKey = (id: string,) => {
    return [`/api/admin/AdvertisementMedia/${id}`] as const;
    }

    
export const getGetApiAdminAdvertisementMediaIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAdvertisementMediaIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>> = ({ signal }) => getApiAdminAdvertisementMediaId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAdvertisementMediaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>>
export type GetApiAdminAdvertisementMediaIdQueryError = AxiosError<unknown>


export function useGetApiAdminAdvertisementMediaId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementMediaId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementMediaId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAdvertisementMediaId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAdvertisementMediaIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminAdvertisementMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/AdvertisementMedia/${id}`,options
    );
  }



export const getDeleteApiAdminAdvertisementMediaIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementMediaId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminAdvertisementMediaId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminAdvertisementMediaId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminAdvertisementMediaIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminAdvertisementMediaId>>>
    
    export type DeleteApiAdminAdvertisementMediaIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminAdvertisementMediaId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAdvertisementMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminAdvertisementMediaId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminAdvertisementMediaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAdvertisementMediaAdvertisementAdvertisementId = (
    advertisementId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdvertisementMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/AdvertisementMedia/Advertisement/${advertisementId}`,options
    );
  }


export const getGetApiAdminAdvertisementMediaAdvertisementAdvertisementIdQueryKey = (advertisementId: string,) => {
    return [`/api/admin/AdvertisementMedia/Advertisement/${advertisementId}`] as const;
    }

    
export const getGetApiAdminAdvertisementMediaAdvertisementAdvertisementIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError = AxiosError<unknown>>(advertisementId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAdvertisementMediaAdvertisementAdvertisementIdQueryKey(advertisementId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>> = ({ signal }) => getApiAdminAdvertisementMediaAdvertisementAdvertisementId(advertisementId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(advertisementId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAdvertisementMediaAdvertisementAdvertisementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>>
export type GetApiAdminAdvertisementMediaAdvertisementAdvertisementIdQueryError = AxiosError<unknown>


export function useGetApiAdminAdvertisementMediaAdvertisementAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError = AxiosError<unknown>>(
 advertisementId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementMediaAdvertisementAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError = AxiosError<unknown>>(
 advertisementId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAdvertisementMediaAdvertisementAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError = AxiosError<unknown>>(
 advertisementId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAdvertisementMediaAdvertisementAdvertisementId<TData = Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError = AxiosError<unknown>>(
 advertisementId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAdvertisementMediaAdvertisementAdvertisementId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAdvertisementMediaAdvertisementAdvertisementIdQueryOptions(advertisementId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminAdvertisementMediaSasUrlForUpload = (
    getSasUrlForUploadAdvertisementMediaQuery: GetSasUrlForUploadAdvertisementMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/AdvertisementMedia/SasUrlForUpload`,
      getSasUrlForUploadAdvertisementMediaQuery,options
    );
  }



export const getPostApiAdminAdvertisementMediaSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadAdvertisementMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadAdvertisementMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAdvertisementMediaSasUrlForUpload>>, {data: GetSasUrlForUploadAdvertisementMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAdvertisementMediaSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAdvertisementMediaSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAdvertisementMediaSasUrlForUpload>>>
    export type PostApiAdminAdvertisementMediaSasUrlForUploadMutationBody = GetSasUrlForUploadAdvertisementMediaQuery
    export type PostApiAdminAdvertisementMediaSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminAdvertisementMediaSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAdvertisementMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadAdvertisementMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAdvertisementMediaSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadAdvertisementMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAdvertisementMediaSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAppointment = (
    params?: GetApiAppointmentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoPagedResult>> => {
    
    return axios.get(
      `/api/Appointment`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAppointmentQueryKey = (params?: GetApiAppointmentParams,) => {
    return [`/api/Appointment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAppointmentQueryOptions = <TData = Awaited<ReturnType<typeof getApiAppointment>>, TError = AxiosError<unknown>>(params?: GetApiAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAppointmentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAppointment>>> = ({ signal }) => getApiAppointment(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAppointment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAppointmentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAppointment>>>
export type GetApiAppointmentQueryError = AxiosError<unknown>


export function useGetApiAppointment<TData = Awaited<ReturnType<typeof getApiAppointment>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAppointmentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAppointment>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAppointment<TData = Awaited<ReturnType<typeof getApiAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAppointment>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAppointment<TData = Awaited<ReturnType<typeof getApiAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAppointment<TData = Awaited<ReturnType<typeof getApiAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAppointmentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAppointmentId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDto>> => {
    
    return axios.get(
      `/api/Appointment/${id}`,options
    );
  }


export const getGetApiAppointmentIdQueryKey = (id: string,) => {
    return [`/api/Appointment/${id}`] as const;
    }

    
export const getGetApiAppointmentIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAppointmentId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAppointmentIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAppointmentId>>> = ({ signal }) => getApiAppointmentId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAppointmentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAppointmentId>>>
export type GetApiAppointmentIdQueryError = AxiosError<unknown>


export function useGetApiAppointmentId<TData = Awaited<ReturnType<typeof getApiAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAppointmentId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAppointmentId<TData = Awaited<ReturnType<typeof getApiAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAppointmentId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAppointmentId<TData = Awaited<ReturnType<typeof getApiAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAppointmentId<TData = Awaited<ReturnType<typeof getApiAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAppointmentIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAppointmentRequest = (
    params?: GetApiAppointmentRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoPagedResult>> => {
    
    return axios.get(
      `/api/Appointment/Request`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAppointmentRequestQueryKey = (params?: GetApiAppointmentRequestParams,) => {
    return [`/api/Appointment/Request`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAppointmentRequestQueryOptions = <TData = Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError = AxiosError<unknown>>(params?: GetApiAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAppointmentRequestQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAppointmentRequest>>> = ({ signal }) => getApiAppointmentRequest(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAppointmentRequestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAppointmentRequest>>>
export type GetApiAppointmentRequestQueryError = AxiosError<unknown>


export function useGetApiAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAppointmentRequestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAppointmentRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAppointmentRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAppointmentRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAppointmentRequestQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiBusinessAffiliateAppointment = (
    params?: GetApiBusinessAffiliateAppointmentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoPagedResult>> => {
    
    return axios.get(
      `/api/businessAffiliate/Appointment`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiBusinessAffiliateAppointmentQueryKey = (params?: GetApiBusinessAffiliateAppointmentParams,) => {
    return [`/api/businessAffiliate/Appointment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiBusinessAffiliateAppointmentQueryOptions = <TData = Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError = AxiosError<unknown>>(params?: GetApiBusinessAffiliateAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBusinessAffiliateAppointmentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>> = ({ signal }) => getApiBusinessAffiliateAppointment(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiBusinessAffiliateAppointmentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>>
export type GetApiBusinessAffiliateAppointmentQueryError = AxiosError<unknown>


export function useGetApiBusinessAffiliateAppointment<TData = Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiBusinessAffiliateAppointmentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiBusinessAffiliateAppointment<TData = Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiBusinessAffiliateAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiBusinessAffiliateAppointment<TData = Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiBusinessAffiliateAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiBusinessAffiliateAppointment<TData = Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiBusinessAffiliateAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBusinessAffiliateAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiBusinessAffiliateAppointmentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminAppointment = (
    upsertAppointmentCommand: UpsertAppointmentCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/Appointment`,
      upsertAppointmentCommand,options
    );
  }



export const getPostApiAdminAppointmentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAppointment>>, TError,{data: UpsertAppointmentCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAppointment>>, TError,{data: UpsertAppointmentCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAppointment>>, {data: UpsertAppointmentCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAppointment(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAppointmentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAppointment>>>
    export type PostApiAdminAppointmentMutationBody = UpsertAppointmentCommand
    export type PostApiAdminAppointmentMutationError = AxiosError<unknown>

    export const usePostApiAdminAppointment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAppointment>>, TError,{data: UpsertAppointmentCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAppointment>>,
        TError,
        {data: UpsertAppointmentCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAppointmentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAppointment = (
    params?: GetApiAdminAppointmentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Appointment`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminAppointmentQueryKey = (params?: GetApiAdminAppointmentParams,) => {
    return [`/api/admin/Appointment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminAppointmentQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAppointment>>, TError = AxiosError<unknown>>(params?: GetApiAdminAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAppointmentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAppointment>>> = ({ signal }) => getApiAdminAppointment(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAppointmentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAppointment>>>
export type GetApiAdminAppointmentQueryError = AxiosError<unknown>


export function useGetApiAdminAppointment<TData = Awaited<ReturnType<typeof getApiAdminAppointment>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminAppointmentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointment>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointment<TData = Awaited<ReturnType<typeof getApiAdminAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointment>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointment<TData = Awaited<ReturnType<typeof getApiAdminAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAppointment<TData = Awaited<ReturnType<typeof getApiAdminAppointment>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointment>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAppointmentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminAppointmentId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDto>> => {
    
    return axios.get(
      `/api/admin/Appointment/${id}`,options
    );
  }


export const getGetApiAdminAppointmentIdQueryKey = (id: string,) => {
    return [`/api/admin/Appointment/${id}`] as const;
    }

    
export const getGetApiAdminAppointmentIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAppointmentIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAppointmentId>>> = ({ signal }) => getApiAdminAppointmentId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAppointmentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAppointmentId>>>
export type GetApiAdminAppointmentIdQueryError = AxiosError<unknown>


export function useGetApiAdminAppointmentId<TData = Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointmentId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointmentId<TData = Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointmentId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointmentId<TData = Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAppointmentId<TData = Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAppointmentIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminAppointmentId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Appointment/${id}`,options
    );
  }



export const getDeleteApiAdminAppointmentIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAppointmentId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAppointmentId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminAppointmentId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminAppointmentId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminAppointmentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminAppointmentId>>>
    
    export type DeleteApiAdminAppointmentIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminAppointmentId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminAppointmentId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminAppointmentId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminAppointmentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminAppointmentBusinessAffiliate = (
    params?: GetApiAdminAppointmentBusinessAffiliateParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Appointment/BusinessAffiliate`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminAppointmentBusinessAffiliateQueryKey = (params?: GetApiAdminAppointmentBusinessAffiliateParams,) => {
    return [`/api/admin/Appointment/BusinessAffiliate`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminAppointmentBusinessAffiliateQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError = AxiosError<unknown>>(params?: GetApiAdminAppointmentBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAppointmentBusinessAffiliateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>> = ({ signal }) => getApiAdminAppointmentBusinessAffiliate(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAppointmentBusinessAffiliateQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>>
export type GetApiAdminAppointmentBusinessAffiliateQueryError = AxiosError<unknown>


export function useGetApiAdminAppointmentBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminAppointmentBusinessAffiliateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointmentBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointmentBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAppointmentBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentBusinessAffiliate>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAppointmentBusinessAffiliateQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminAppointmentRequest = (
    params?: GetApiAdminAppointmentRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AppointmentDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Appointment/Request`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminAppointmentRequestQueryKey = (params?: GetApiAdminAppointmentRequestParams,) => {
    return [`/api/admin/Appointment/Request`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminAppointmentRequestQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError = AxiosError<unknown>>(params?: GetApiAdminAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminAppointmentRequestQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>> = ({ signal }) => getApiAdminAppointmentRequest(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminAppointmentRequestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>>
export type GetApiAdminAppointmentRequestQueryError = AxiosError<unknown>


export function useGetApiAdminAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminAppointmentRequestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminAppointmentRequest<TData = Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminAppointmentRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminAppointmentRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminAppointmentRequestQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAuthLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthenticationResponseDto>> => {
    
    return axios.post(
      `/api/Auth/Login`,
      loginDto,options
    );
  }



export const getPostApiAuthLoginMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = LoginDto
    export type PostApiAuthLoginMutationError = AxiosError<unknown>

    export const usePostApiAuthLogin = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthRegister = (
    registerDto: RegisterDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthenticationResponseDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Auth/Register`,
      registerDto,options
    );
  }



export const getPostApiAuthRegisterMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: RegisterDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRegister>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRegister>>>
    export type PostApiAuthRegisterMutationBody = RegisterDto
    export type PostApiAuthRegisterMutationError = AxiosError<unknown>

    export const usePostApiAuthRegister = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRegister>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthLogout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Auth/Logout`,undefined,options
    );
  }



export const getPostApiAuthLogoutMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogout>>, void> = () => {
          

          return  postApiAuthLogout(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogout>>>
    
    export type PostApiAuthLogoutMutationError = AxiosError<unknown>

    export const usePostApiAuthLogout = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthCheckEmail = (
    emailExistsRequestDto: EmailExistsRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmailExistsResponseDto>> => {
    
    return axios.post(
      `/api/Auth/CheckEmail`,
      emailExistsRequestDto,options
    );
  }



export const getPostApiAuthCheckEmailMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCheckEmail>>, TError,{data: EmailExistsRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCheckEmail>>, TError,{data: EmailExistsRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthCheckEmail>>, {data: EmailExistsRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthCheckEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthCheckEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthCheckEmail>>>
    export type PostApiAuthCheckEmailMutationBody = EmailExistsRequestDto
    export type PostApiAuthCheckEmailMutationError = AxiosError<unknown>

    export const usePostApiAuthCheckEmail = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCheckEmail>>, TError,{data: EmailExistsRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthCheckEmail>>,
        TError,
        {data: EmailExistsRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthCheckEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthCheckPhoneNumber = (
    phoneNumberExistsRequestDto: PhoneNumberExistsRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhoneNumberExistsResponseDto>> => {
    
    return axios.post(
      `/api/Auth/CheckPhoneNumber`,
      phoneNumberExistsRequestDto,options
    );
  }



export const getPostApiAuthCheckPhoneNumberMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCheckPhoneNumber>>, TError,{data: PhoneNumberExistsRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCheckPhoneNumber>>, TError,{data: PhoneNumberExistsRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthCheckPhoneNumber>>, {data: PhoneNumberExistsRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthCheckPhoneNumber(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthCheckPhoneNumberMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthCheckPhoneNumber>>>
    export type PostApiAuthCheckPhoneNumberMutationBody = PhoneNumberExistsRequestDto
    export type PostApiAuthCheckPhoneNumberMutationError = AxiosError<unknown>

    export const usePostApiAuthCheckPhoneNumber = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCheckPhoneNumber>>, TError,{data: PhoneNumberExistsRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthCheckPhoneNumber>>,
        TError,
        {data: PhoneNumberExistsRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthCheckPhoneNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthGenerateNewJwtToken = (
    tokenDto: TokenDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthenticationResponseDto>> => {
    
    return axios.post(
      `/api/Auth/GenerateNewJwtToken`,
      tokenDto,options
    );
  }



export const getPostApiAuthGenerateNewJwtTokenMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthGenerateNewJwtToken>>, TError,{data: TokenDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthGenerateNewJwtToken>>, TError,{data: TokenDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthGenerateNewJwtToken>>, {data: TokenDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthGenerateNewJwtToken(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthGenerateNewJwtTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthGenerateNewJwtToken>>>
    export type PostApiAuthGenerateNewJwtTokenMutationBody = TokenDto
    export type PostApiAuthGenerateNewJwtTokenMutationError = AxiosError<unknown>

    export const usePostApiAuthGenerateNewJwtToken = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthGenerateNewJwtToken>>, TError,{data: TokenDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthGenerateNewJwtToken>>,
        TError,
        {data: TokenDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthGenerateNewJwtTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthForgotPassword = (
    forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Auth/ForgotPassword`,
      forgotPasswordRequestDto,options
    );
  }



export const getPostApiAuthForgotPasswordMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthForgotPassword>>, TError,{data: ForgotPasswordRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthForgotPassword>>, TError,{data: ForgotPasswordRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthForgotPassword>>, {data: ForgotPasswordRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthForgotPassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthForgotPassword>>>
    export type PostApiAuthForgotPasswordMutationBody = ForgotPasswordRequestDto
    export type PostApiAuthForgotPasswordMutationError = AxiosError<unknown>

    export const usePostApiAuthForgotPassword = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthForgotPassword>>, TError,{data: ForgotPasswordRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthForgotPassword>>,
        TError,
        {data: ForgotPasswordRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthResetPassword = (
    resetPasswordRequestDto: ResetPasswordRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthenticationResponseDto>> => {
    
    return axios.post(
      `/api/Auth/ResetPassword`,
      resetPasswordRequestDto,options
    );
  }



export const getPostApiAuthResetPasswordMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResetPassword>>, TError,{data: ResetPasswordRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResetPassword>>, TError,{data: ResetPasswordRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthResetPassword>>, {data: ResetPasswordRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthResetPassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthResetPassword>>>
    export type PostApiAuthResetPasswordMutationBody = ResetPasswordRequestDto
    export type PostApiAuthResetPasswordMutationError = AxiosError<unknown>

    export const usePostApiAuthResetPassword = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResetPassword>>, TError,{data: ResetPasswordRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthResetPassword>>,
        TError,
        {data: ResetPasswordRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAuthChangePassword = (
    changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Auth/ChangePassword`,
      changePasswordDto,options
    );
  }



export const getPostApiAuthChangePasswordMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthChangePassword>>, TError,{data: ChangePasswordDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthChangePassword>>, TError,{data: ChangePasswordDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthChangePassword>>, {data: ChangePasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthChangePassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthChangePassword>>>
    export type PostApiAuthChangePasswordMutationBody = ChangePasswordDto
    export type PostApiAuthChangePasswordMutationError = AxiosError<unknown>

    export const usePostApiAuthChangePassword = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthChangePassword>>, TError,{data: ChangePasswordDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthChangePassword>>,
        TError,
        {data: ChangePasswordDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAuthHi = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.get(
      `/api/Auth/hi`,options
    );
  }


export const getGetApiAuthHiQueryKey = () => {
    return [`/api/Auth/hi`] as const;
    }

    
export const getGetApiAuthHiQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthHi>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthHi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthHiQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthHi>>> = ({ signal }) => getApiAuthHi({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthHi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAuthHiQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthHi>>>
export type GetApiAuthHiQueryError = AxiosError<unknown>


export function useGetApiAuthHi<TData = Awaited<ReturnType<typeof getApiAuthHi>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthHi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthHi>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAuthHi<TData = Awaited<ReturnType<typeof getApiAuthHi>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthHi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthHi>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAuthHi<TData = Awaited<ReturnType<typeof getApiAuthHi>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthHi>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAuthHi<TData = Awaited<ReturnType<typeof getApiAuthHi>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthHi>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAuthHiQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAuthTest = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.get(
      `/api/Auth/test`,options
    );
  }


export const getGetApiAuthTestQueryKey = () => {
    return [`/api/Auth/test`] as const;
    }

    
export const getGetApiAuthTestQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthTest>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthTest>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthTestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthTest>>> = ({ signal }) => getApiAuthTest({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthTest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAuthTestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthTest>>>
export type GetApiAuthTestQueryError = AxiosError<unknown>


export function useGetApiAuthTest<TData = Awaited<ReturnType<typeof getApiAuthTest>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthTest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthTest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAuthTest<TData = Awaited<ReturnType<typeof getApiAuthTest>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthTest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthTest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAuthTest<TData = Awaited<ReturnType<typeof getApiAuthTest>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthTest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAuthTest<TData = Awaited<ReturnType<typeof getApiAuthTest>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthTest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAuthTestQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminAuthLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthenticationResponseDto>> => {
    
    return axios.post(
      `/api/admin/Auth/Login`,
      loginDto,options
    );
  }



export const getPostApiAdminAuthLoginMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAuthLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAuthLogin>>, TError,{data: LoginDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminAuthLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminAuthLogin>>>
    export type PostApiAdminAuthLoginMutationBody = LoginDto
    export type PostApiAdminAuthLoginMutationError = AxiosError<unknown>

    export const usePostApiAdminAuthLogin = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminAuthLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminAuthLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getPostApiAdminAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiBrowsingHistory = (
    addBrowsingHistoryCommand: AddBrowsingHistoryCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BrowsingHistoryDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/BrowsingHistory`,
      addBrowsingHistoryCommand,options
    );
  }



export const getPostApiBrowsingHistoryMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBrowsingHistory>>, TError,{data: AddBrowsingHistoryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiBrowsingHistory>>, TError,{data: AddBrowsingHistoryCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBrowsingHistory>>, {data: AddBrowsingHistoryCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiBrowsingHistory(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiBrowsingHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBrowsingHistory>>>
    export type PostApiBrowsingHistoryMutationBody = AddBrowsingHistoryCommand
    export type PostApiBrowsingHistoryMutationError = AxiosError<unknown>

    export const usePostApiBrowsingHistory = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBrowsingHistory>>, TError,{data: AddBrowsingHistoryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiBrowsingHistory>>,
        TError,
        {data: AddBrowsingHistoryCommand},
        TContext
      > => {

      const mutationOptions = getPostApiBrowsingHistoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiBrowsingHistory = (
    params?: GetApiBrowsingHistoryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BrowsingHistoryDtoPagedResult>> => {
    
    return axios.get(
      `/api/BrowsingHistory`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiBrowsingHistoryQueryKey = (params?: GetApiBrowsingHistoryParams,) => {
    return [`/api/BrowsingHistory`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiBrowsingHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError = AxiosError<unknown>>(params?: GetApiBrowsingHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBrowsingHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBrowsingHistory>>> = ({ signal }) => getApiBrowsingHistory(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiBrowsingHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBrowsingHistory>>>
export type GetApiBrowsingHistoryQueryError = AxiosError<unknown>


export function useGetApiBrowsingHistory<TData = Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiBrowsingHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBrowsingHistory>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiBrowsingHistory<TData = Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError = AxiosError<unknown>>(
 params?: GetApiBrowsingHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBrowsingHistory>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiBrowsingHistory<TData = Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError = AxiosError<unknown>>(
 params?: GetApiBrowsingHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiBrowsingHistory<TData = Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError = AxiosError<unknown>>(
 params?: GetApiBrowsingHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrowsingHistory>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiBrowsingHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiBusinessAffiliateBusinessAffiliate = (
    updateBusinessAffiliateCommand: UpdateBusinessAffiliateCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BusinessAffiliateDetailDto>> => {
    
    return axios.put(
      `/api/businessAffiliate/BusinessAffiliate`,
      updateBusinessAffiliateCommand,options
    );
  }



export const getPutApiBusinessAffiliateBusinessAffiliateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiBusinessAffiliateBusinessAffiliate>>, TError,{data: UpdateBusinessAffiliateCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiBusinessAffiliateBusinessAffiliate>>, TError,{data: UpdateBusinessAffiliateCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiBusinessAffiliateBusinessAffiliate>>, {data: UpdateBusinessAffiliateCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiBusinessAffiliateBusinessAffiliate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiBusinessAffiliateBusinessAffiliateMutationResult = NonNullable<Awaited<ReturnType<typeof putApiBusinessAffiliateBusinessAffiliate>>>
    export type PutApiBusinessAffiliateBusinessAffiliateMutationBody = UpdateBusinessAffiliateCommand
    export type PutApiBusinessAffiliateBusinessAffiliateMutationError = AxiosError<unknown>

    export const usePutApiBusinessAffiliateBusinessAffiliate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiBusinessAffiliateBusinessAffiliate>>, TError,{data: UpdateBusinessAffiliateCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putApiBusinessAffiliateBusinessAffiliate>>,
        TError,
        {data: UpdateBusinessAffiliateCommand},
        TContext
      > => {

      const mutationOptions = getPutApiBusinessAffiliateBusinessAffiliateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload = (
    getSasUrlForUploadBusinessAffiliateMediaQuery: GetSasUrlForUploadBusinessAffiliateMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/businessAffiliate/BusinessAffiliate/SasUrlForUpload`,
      getSasUrlForUploadBusinessAffiliateMediaQuery,options
    );
  }



export const getPostApiBusinessAffiliateBusinessAffiliateSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload>>, TError,{data: GetSasUrlForUploadBusinessAffiliateMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload>>, TError,{data: GetSasUrlForUploadBusinessAffiliateMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload>>, {data: GetSasUrlForUploadBusinessAffiliateMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiBusinessAffiliateBusinessAffiliateSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload>>>
    export type PostApiBusinessAffiliateBusinessAffiliateSasUrlForUploadMutationBody = GetSasUrlForUploadBusinessAffiliateMediaQuery
    export type PostApiBusinessAffiliateBusinessAffiliateSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiBusinessAffiliateBusinessAffiliateSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload>>, TError,{data: GetSasUrlForUploadBusinessAffiliateMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiBusinessAffiliateBusinessAffiliateSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadBusinessAffiliateMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiBusinessAffiliateBusinessAffiliateSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminBusinessAffiliate = (
    upsertBusinessAffiliateCommand: UpsertBusinessAffiliateCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BusinessAffiliateDetailDto>> => {
    
    return axios.post(
      `/api/admin/BusinessAffiliate`,
      upsertBusinessAffiliateCommand,options
    );
  }



export const getPostApiAdminBusinessAffiliateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminBusinessAffiliate>>, TError,{data: UpsertBusinessAffiliateCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminBusinessAffiliate>>, TError,{data: UpsertBusinessAffiliateCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminBusinessAffiliate>>, {data: UpsertBusinessAffiliateCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminBusinessAffiliate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminBusinessAffiliateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminBusinessAffiliate>>>
    export type PostApiAdminBusinessAffiliateMutationBody = UpsertBusinessAffiliateCommand
    export type PostApiAdminBusinessAffiliateMutationError = AxiosError<unknown>

    export const usePostApiAdminBusinessAffiliate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminBusinessAffiliate>>, TError,{data: UpsertBusinessAffiliateCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminBusinessAffiliate>>,
        TError,
        {data: UpsertBusinessAffiliateCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminBusinessAffiliateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminBusinessAffiliate = (
    params?: GetApiAdminBusinessAffiliateParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BusinessAffiliateDetailDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/BusinessAffiliate`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminBusinessAffiliateQueryKey = (params?: GetApiAdminBusinessAffiliateParams,) => {
    return [`/api/admin/BusinessAffiliate`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminBusinessAffiliateQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError = AxiosError<unknown>>(params?: GetApiAdminBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminBusinessAffiliateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>> = ({ signal }) => getApiAdminBusinessAffiliate(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminBusinessAffiliateQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>>
export type GetApiAdminBusinessAffiliateQueryError = AxiosError<unknown>


export function useGetApiAdminBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminBusinessAffiliateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminBusinessAffiliate<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminBusinessAffiliateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliate>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminBusinessAffiliateQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminBusinessAffiliateId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BusinessAffiliateDetailDto>> => {
    
    return axios.get(
      `/api/admin/BusinessAffiliate/${id}`,options
    );
  }


export const getGetApiAdminBusinessAffiliateIdQueryKey = (id: string,) => {
    return [`/api/admin/BusinessAffiliate/${id}`] as const;
    }

    
export const getGetApiAdminBusinessAffiliateIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminBusinessAffiliateIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>> = ({ signal }) => getApiAdminBusinessAffiliateId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminBusinessAffiliateIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>>
export type GetApiAdminBusinessAffiliateIdQueryError = AxiosError<unknown>


export function useGetApiAdminBusinessAffiliateId<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminBusinessAffiliateId<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminBusinessAffiliateId<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminBusinessAffiliateId<TData = Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminBusinessAffiliateId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminBusinessAffiliateIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminBusinessAffiliateId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/BusinessAffiliate/${id}`,options
    );
  }



export const getDeleteApiAdminBusinessAffiliateIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminBusinessAffiliateId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminBusinessAffiliateId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminBusinessAffiliateId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminBusinessAffiliateId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminBusinessAffiliateIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminBusinessAffiliateId>>>
    
    export type DeleteApiAdminBusinessAffiliateIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminBusinessAffiliateId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminBusinessAffiliateId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminBusinessAffiliateId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminBusinessAffiliateIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminBusinessAffiliateSasUrlForUpload = (
    getSasUrlForUploadBusinessAffiliateMediaQuery: GetSasUrlForUploadBusinessAffiliateMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/BusinessAffiliate/SasUrlForUpload`,
      getSasUrlForUploadBusinessAffiliateMediaQuery,options
    );
  }



export const getPostApiAdminBusinessAffiliateSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminBusinessAffiliateSasUrlForUpload>>, TError,{data: GetSasUrlForUploadBusinessAffiliateMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminBusinessAffiliateSasUrlForUpload>>, TError,{data: GetSasUrlForUploadBusinessAffiliateMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminBusinessAffiliateSasUrlForUpload>>, {data: GetSasUrlForUploadBusinessAffiliateMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminBusinessAffiliateSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminBusinessAffiliateSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminBusinessAffiliateSasUrlForUpload>>>
    export type PostApiAdminBusinessAffiliateSasUrlForUploadMutationBody = GetSasUrlForUploadBusinessAffiliateMediaQuery
    export type PostApiAdminBusinessAffiliateSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminBusinessAffiliateSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminBusinessAffiliateSasUrlForUpload>>, TError,{data: GetSasUrlForUploadBusinessAffiliateMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminBusinessAffiliateSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadBusinessAffiliateMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminBusinessAffiliateSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminCollaborator = (
    upsertCollaboratorCommand: UpsertCollaboratorCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/admin/Collaborator`,
      upsertCollaboratorCommand,options
    );
  }



export const getPostApiAdminCollaboratorMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminCollaborator>>, TError,{data: UpsertCollaboratorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminCollaborator>>, TError,{data: UpsertCollaboratorCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminCollaborator>>, {data: UpsertCollaboratorCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminCollaborator(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminCollaboratorMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminCollaborator>>>
    export type PostApiAdminCollaboratorMutationBody = UpsertCollaboratorCommand
    export type PostApiAdminCollaboratorMutationError = AxiosError<unknown>

    export const usePostApiAdminCollaborator = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminCollaborator>>, TError,{data: UpsertCollaboratorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminCollaborator>>,
        TError,
        {data: UpsertCollaboratorCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminCollaboratorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminCollaborator = (
    params?: GetApiAdminCollaboratorParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CollaboratorDto[]>> => {
    
    return axios.get(
      `/api/admin/Collaborator`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminCollaboratorQueryKey = (params?: GetApiAdminCollaboratorParams,) => {
    return [`/api/admin/Collaborator`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminCollaboratorQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError = AxiosError<unknown>>(params?: GetApiAdminCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminCollaboratorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminCollaborator>>> = ({ signal }) => getApiAdminCollaborator(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminCollaboratorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminCollaborator>>>
export type GetApiAdminCollaboratorQueryError = AxiosError<unknown>


export function useGetApiAdminCollaborator<TData = Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminCollaboratorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminCollaborator>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminCollaborator<TData = Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminCollaborator>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminCollaborator<TData = Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminCollaborator<TData = Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaborator>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminCollaboratorQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminCollaboratorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CollaboratorDto>> => {
    
    return axios.get(
      `/api/admin/Collaborator/${id}`,options
    );
  }


export const getGetApiAdminCollaboratorIdQueryKey = (id: string,) => {
    return [`/api/admin/Collaborator/${id}`] as const;
    }

    
export const getGetApiAdminCollaboratorIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminCollaboratorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>> = ({ signal }) => getApiAdminCollaboratorId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminCollaboratorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>>
export type GetApiAdminCollaboratorIdQueryError = AxiosError<unknown>


export function useGetApiAdminCollaboratorId<TData = Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminCollaboratorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminCollaboratorId<TData = Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminCollaboratorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminCollaboratorId<TData = Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminCollaboratorId<TData = Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminCollaboratorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminCollaboratorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminCollaboratorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Collaborator/${id}`,options
    );
  }



export const getDeleteApiAdminCollaboratorIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminCollaboratorId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminCollaboratorId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminCollaboratorId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminCollaboratorId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminCollaboratorIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminCollaboratorId>>>
    
    export type DeleteApiAdminCollaboratorIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminCollaboratorId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminCollaboratorId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminCollaboratorId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminCollaboratorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiDistributor = (
    params?: GetApiDistributorParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorSummaryDtoPagedResult>> => {
    
    return axios.get(
      `/api/Distributor`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiDistributorQueryKey = (params?: GetApiDistributorParams,) => {
    return [`/api/Distributor`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiDistributorQueryOptions = <TData = Awaited<ReturnType<typeof getApiDistributor>>, TError = AxiosError<unknown>>(params?: GetApiDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributor>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDistributorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDistributor>>> = ({ signal }) => getApiDistributor(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDistributor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiDistributorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDistributor>>>
export type GetApiDistributorQueryError = AxiosError<unknown>


export function useGetApiDistributor<TData = Awaited<ReturnType<typeof getApiDistributor>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiDistributorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDistributor>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiDistributor<TData = Awaited<ReturnType<typeof getApiDistributor>>, TError = AxiosError<unknown>>(
 params?: GetApiDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDistributor>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiDistributor<TData = Awaited<ReturnType<typeof getApiDistributor>>, TError = AxiosError<unknown>>(
 params?: GetApiDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributor>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiDistributor<TData = Awaited<ReturnType<typeof getApiDistributor>>, TError = AxiosError<unknown>>(
 params?: GetApiDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributor>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiDistributorQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiDistributorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorSummaryDto>> => {
    
    return axios.get(
      `/api/Distributor/${id}`,options
    );
  }


export const getGetApiDistributorIdQueryKey = (id: string,) => {
    return [`/api/Distributor/${id}`] as const;
    }

    
export const getGetApiDistributorIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiDistributorId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDistributorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDistributorId>>> = ({ signal }) => getApiDistributorId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiDistributorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDistributorId>>>
export type GetApiDistributorIdQueryError = AxiosError<unknown>


export function useGetApiDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDistributorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDistributorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiDistributorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiDistributorDistributorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorDetailDto>> => {
    
    return axios.get(
      `/api/distributor/Distributor/${id}`,options
    );
  }


export const getGetApiDistributorDistributorIdQueryKey = (id: string,) => {
    return [`/api/distributor/Distributor/${id}`] as const;
    }

    
export const getGetApiDistributorDistributorIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDistributorDistributorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDistributorDistributorId>>> = ({ signal }) => getApiDistributorDistributorId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiDistributorDistributorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDistributorDistributorId>>>
export type GetApiDistributorDistributorIdQueryError = AxiosError<unknown>


export function useGetApiDistributorDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDistributorDistributorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiDistributorDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDistributorDistributorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiDistributorDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiDistributorDistributorId<TData = Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDistributorDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiDistributorDistributorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiDistributorDistributor = (
    updateDistributorCommand: UpdateDistributorCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorDetailDto>> => {
    
    return axios.put(
      `/api/distributor/Distributor`,
      updateDistributorCommand,options
    );
  }



export const getPutApiDistributorDistributorMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiDistributorDistributor>>, TError,{data: UpdateDistributorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiDistributorDistributor>>, TError,{data: UpdateDistributorCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiDistributorDistributor>>, {data: UpdateDistributorCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiDistributorDistributor(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiDistributorDistributorMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDistributorDistributor>>>
    export type PutApiDistributorDistributorMutationBody = UpdateDistributorCommand
    export type PutApiDistributorDistributorMutationError = AxiosError<unknown>

    export const usePutApiDistributorDistributor = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiDistributorDistributor>>, TError,{data: UpdateDistributorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putApiDistributorDistributor>>,
        TError,
        {data: UpdateDistributorCommand},
        TContext
      > => {

      const mutationOptions = getPutApiDistributorDistributorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiDistributorDistributorSasUrlForUpload = (
    getSasUrlForUploadDistributorMediaQuery: GetSasUrlForUploadDistributorMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/distributor/Distributor/SasUrlForUpload`,
      getSasUrlForUploadDistributorMediaQuery,options
    );
  }



export const getPostApiDistributorDistributorSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDistributorDistributorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadDistributorMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiDistributorDistributorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadDistributorMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDistributorDistributorSasUrlForUpload>>, {data: GetSasUrlForUploadDistributorMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiDistributorDistributorSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDistributorDistributorSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDistributorDistributorSasUrlForUpload>>>
    export type PostApiDistributorDistributorSasUrlForUploadMutationBody = GetSasUrlForUploadDistributorMediaQuery
    export type PostApiDistributorDistributorSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiDistributorDistributorSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDistributorDistributorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadDistributorMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiDistributorDistributorSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadDistributorMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiDistributorDistributorSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminDistributor = (
    upsertDistributorCommand: UpsertDistributorCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorDetailDto>> => {
    
    return axios.post(
      `/api/admin/Distributor`,
      upsertDistributorCommand,options
    );
  }



export const getPostApiAdminDistributorMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminDistributor>>, TError,{data: UpsertDistributorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminDistributor>>, TError,{data: UpsertDistributorCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminDistributor>>, {data: UpsertDistributorCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminDistributor(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminDistributorMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminDistributor>>>
    export type PostApiAdminDistributorMutationBody = UpsertDistributorCommand
    export type PostApiAdminDistributorMutationError = AxiosError<unknown>

    export const usePostApiAdminDistributor = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminDistributor>>, TError,{data: UpsertDistributorCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminDistributor>>,
        TError,
        {data: UpsertDistributorCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminDistributorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminDistributor = (
    params?: GetApiAdminDistributorParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorDetailDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Distributor`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminDistributorQueryKey = (params?: GetApiAdminDistributorParams,) => {
    return [`/api/admin/Distributor`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminDistributorQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminDistributor>>, TError = AxiosError<unknown>>(params?: GetApiAdminDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributor>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminDistributorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminDistributor>>> = ({ signal }) => getApiAdminDistributor(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminDistributorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminDistributor>>>
export type GetApiAdminDistributorQueryError = AxiosError<unknown>


export function useGetApiAdminDistributor<TData = Awaited<ReturnType<typeof getApiAdminDistributor>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminDistributorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminDistributor>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminDistributor<TData = Awaited<ReturnType<typeof getApiAdminDistributor>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminDistributor>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminDistributor<TData = Awaited<ReturnType<typeof getApiAdminDistributor>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributor>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminDistributor<TData = Awaited<ReturnType<typeof getApiAdminDistributor>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminDistributorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributor>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminDistributorQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminDistributorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorDetailDto>> => {
    
    return axios.get(
      `/api/admin/Distributor/${id}`,options
    );
  }


export const getGetApiAdminDistributorIdQueryKey = (id: string,) => {
    return [`/api/admin/Distributor/${id}`] as const;
    }

    
export const getGetApiAdminDistributorIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminDistributorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminDistributorId>>> = ({ signal }) => getApiAdminDistributorId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminDistributorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminDistributorId>>>
export type GetApiAdminDistributorIdQueryError = AxiosError<unknown>


export function useGetApiAdminDistributorId<TData = Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminDistributorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminDistributorId<TData = Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminDistributorId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminDistributorId<TData = Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminDistributorId<TData = Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDistributorId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminDistributorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminDistributorId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Distributor/${id}`,options
    );
  }



export const getDeleteApiAdminDistributorIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminDistributorId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminDistributorId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminDistributorId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminDistributorId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminDistributorIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminDistributorId>>>
    
    export type DeleteApiAdminDistributorIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminDistributorId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminDistributorId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminDistributorId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminDistributorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminDistributorSasUrlForUpload = (
    getSasUrlForUploadDistributorMediaQuery: GetSasUrlForUploadDistributorMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/Distributor/SasUrlForUpload`,
      getSasUrlForUploadDistributorMediaQuery,options
    );
  }



export const getPostApiAdminDistributorSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminDistributorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadDistributorMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminDistributorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadDistributorMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminDistributorSasUrlForUpload>>, {data: GetSasUrlForUploadDistributorMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminDistributorSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminDistributorSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminDistributorSasUrlForUpload>>>
    export type PostApiAdminDistributorSasUrlForUploadMutationBody = GetSasUrlForUploadDistributorMediaQuery
    export type PostApiAdminDistributorSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminDistributorSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminDistributorSasUrlForUpload>>, TError,{data: GetSasUrlForUploadDistributorMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminDistributorSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadDistributorMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminDistributorSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiEmailSendEmail = (
    emailDataDto: EmailDataDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Email/SendEmail`,
      emailDataDto,options
    );
  }



export const getPostApiEmailSendEmailMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailSendEmail>>, TError,{data: EmailDataDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailSendEmail>>, TError,{data: EmailDataDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailSendEmail>>, {data: EmailDataDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiEmailSendEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailSendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailSendEmail>>>
    export type PostApiEmailSendEmailMutationBody = EmailDataDto
    export type PostApiEmailSendEmailMutationError = AxiosError<unknown>

    export const usePostApiEmailSendEmail = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailSendEmail>>, TError,{data: EmailDataDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailSendEmail>>,
        TError,
        {data: EmailDataDto},
        TContext
      > => {

      const mutationOptions = getPostApiEmailSendEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiFAQ = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FAQDto[]>> => {
    
    return axios.get(
      `/api/FAQ`,options
    );
  }


export const getGetApiFAQQueryKey = () => {
    return [`/api/FAQ`] as const;
    }

    
export const getGetApiFAQQueryOptions = <TData = Awaited<ReturnType<typeof getApiFAQ>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQ>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFAQQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFAQ>>> = ({ signal }) => getApiFAQ({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFAQ>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFAQQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFAQ>>>
export type GetApiFAQQueryError = AxiosError<unknown>


export function useGetApiFAQ<TData = Awaited<ReturnType<typeof getApiFAQ>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQ>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFAQ>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFAQ<TData = Awaited<ReturnType<typeof getApiFAQ>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQ>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFAQ>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFAQ<TData = Awaited<ReturnType<typeof getApiFAQ>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQ>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFAQ<TData = Awaited<ReturnType<typeof getApiFAQ>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQ>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFAQQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiFAQFaqCategory = (
    faqCategory: FAQCategory, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMakeDto>> => {
    
    return axios.get(
      `/api/FAQ/${faqCategory}`,options
    );
  }


export const getGetApiFAQFaqCategoryQueryKey = (faqCategory: FAQCategory,) => {
    return [`/api/FAQ/${faqCategory}`] as const;
    }

    
export const getGetApiFAQFaqCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError = AxiosError<unknown>>(faqCategory: FAQCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFAQFaqCategoryQueryKey(faqCategory);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFAQFaqCategory>>> = ({ signal }) => getApiFAQFaqCategory(faqCategory, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(faqCategory), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFAQFaqCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFAQFaqCategory>>>
export type GetApiFAQFaqCategoryQueryError = AxiosError<unknown>


export function useGetApiFAQFaqCategory<TData = Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError = AxiosError<unknown>>(
 faqCategory: FAQCategory, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFAQFaqCategory>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFAQFaqCategory<TData = Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError = AxiosError<unknown>>(
 faqCategory: FAQCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFAQFaqCategory>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFAQFaqCategory<TData = Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError = AxiosError<unknown>>(
 faqCategory: FAQCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFAQFaqCategory<TData = Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError = AxiosError<unknown>>(
 faqCategory: FAQCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFAQFaqCategory>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFAQFaqCategoryQueryOptions(faqCategory,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminFAQ = (
    upsertFAQCommand: UpsertFAQCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/admin/FAQ`,
      upsertFAQCommand,options
    );
  }



export const getPostApiAdminFAQMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminFAQ>>, TError,{data: UpsertFAQCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminFAQ>>, TError,{data: UpsertFAQCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminFAQ>>, {data: UpsertFAQCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminFAQ(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminFAQMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminFAQ>>>
    export type PostApiAdminFAQMutationBody = UpsertFAQCommand
    export type PostApiAdminFAQMutationError = AxiosError<unknown>

    export const usePostApiAdminFAQ = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminFAQ>>, TError,{data: UpsertFAQCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminFAQ>>,
        TError,
        {data: UpsertFAQCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminFAQMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAdminFAQId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/FAQ/${id}`,options
    );
  }



export const getDeleteApiAdminFAQIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminFAQId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminFAQId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminFAQId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminFAQId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminFAQIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminFAQId>>>
    
    export type DeleteApiAdminFAQIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminFAQId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminFAQId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminFAQId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminFAQIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiFilter = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FilterDtoDataResponseDto>> => {
    
    return axios.get(
      `/api/Filter`,options
    );
  }


export const getGetApiFilterQueryKey = () => {
    return [`/api/Filter`] as const;
    }

    
export const getGetApiFilterQueryOptions = <TData = Awaited<ReturnType<typeof getApiFilter>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilter>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFilter>>> = ({ signal }) => getApiFilter({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFilter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFilterQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFilter>>>
export type GetApiFilterQueryError = AxiosError<unknown>


export function useGetApiFilter<TData = Awaited<ReturnType<typeof getApiFilter>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilter>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFilter<TData = Awaited<ReturnType<typeof getApiFilter>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilter>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFilter<TData = Awaited<ReturnType<typeof getApiFilter>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilter>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFilter<TData = Awaited<ReturnType<typeof getApiFilter>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilter>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFilterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminIndustry = (
    upsertIndustryCommand: UpsertIndustryCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/admin/Industry`,
      upsertIndustryCommand,options
    );
  }



export const getPostApiAdminIndustryMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminIndustry>>, TError,{data: UpsertIndustryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminIndustry>>, TError,{data: UpsertIndustryCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminIndustry>>, {data: UpsertIndustryCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminIndustry(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminIndustryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminIndustry>>>
    export type PostApiAdminIndustryMutationBody = UpsertIndustryCommand
    export type PostApiAdminIndustryMutationError = AxiosError<unknown>

    export const usePostApiAdminIndustry = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminIndustry>>, TError,{data: UpsertIndustryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminIndustry>>,
        TError,
        {data: UpsertIndustryCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminIndustryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminIndustry = (
    params?: GetApiAdminIndustryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<IndustryDto[]>> => {
    
    return axios.get(
      `/api/admin/Industry`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminIndustryQueryKey = (params?: GetApiAdminIndustryParams,) => {
    return [`/api/admin/Industry`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminIndustryQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminIndustry>>, TError = AxiosError<unknown>>(params?: GetApiAdminIndustryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustry>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminIndustryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminIndustry>>> = ({ signal }) => getApiAdminIndustry(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustry>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminIndustryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminIndustry>>>
export type GetApiAdminIndustryQueryError = AxiosError<unknown>


export function useGetApiAdminIndustry<TData = Awaited<ReturnType<typeof getApiAdminIndustry>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminIndustryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustry>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminIndustry>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminIndustry<TData = Awaited<ReturnType<typeof getApiAdminIndustry>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminIndustryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustry>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminIndustry>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminIndustry<TData = Awaited<ReturnType<typeof getApiAdminIndustry>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminIndustryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustry>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminIndustry<TData = Awaited<ReturnType<typeof getApiAdminIndustry>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminIndustryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustry>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminIndustryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminIndustryId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<IndustryDto>> => {
    
    return axios.get(
      `/api/admin/Industry/${id}`,options
    );
  }


export const getGetApiAdminIndustryIdQueryKey = (id: string,) => {
    return [`/api/admin/Industry/${id}`] as const;
    }

    
export const getGetApiAdminIndustryIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminIndustryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminIndustryId>>> = ({ signal }) => getApiAdminIndustryId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminIndustryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminIndustryId>>>
export type GetApiAdminIndustryIdQueryError = AxiosError<unknown>


export function useGetApiAdminIndustryId<TData = Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminIndustryId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminIndustryId<TData = Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminIndustryId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminIndustryId<TData = Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminIndustryId<TData = Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminIndustryId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminIndustryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminIndustryId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Industry/${id}`,options
    );
  }



export const getDeleteApiAdminIndustryIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminIndustryId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminIndustryId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminIndustryId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminIndustryId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminIndustryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminIndustryId>>>
    
    export type DeleteApiAdminIndustryIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminIndustryId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminIndustryId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminIndustryId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminIndustryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiListing = (
    params?: GetApiListingParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingDtoPagedResult>> => {
    
    return axios.get(
      `/api/Listing`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiListingQueryKey = (params?: GetApiListingParams,) => {
    return [`/api/Listing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiListingQueryOptions = <TData = Awaited<ReturnType<typeof getApiListing>>, TError = AxiosError<unknown>>(params?: GetApiListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiListingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiListing>>> = ({ signal }) => getApiListing(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiListing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiListingQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListing>>>
export type GetApiListingQueryError = AxiosError<unknown>


export function useGetApiListing<TData = Awaited<ReturnType<typeof getApiListing>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiListingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListing>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListing<TData = Awaited<ReturnType<typeof getApiListing>>, TError = AxiosError<unknown>>(
 params?: GetApiListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListing>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListing<TData = Awaited<ReturnType<typeof getApiListing>>, TError = AxiosError<unknown>>(
 params?: GetApiListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiListing<TData = Awaited<ReturnType<typeof getApiListing>>, TError = AxiosError<unknown>>(
 params?: GetApiListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiListingQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiListingId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingDto>> => {
    
    return axios.get(
      `/api/Listing/${id}`,options
    );
  }


export const getGetApiListingIdQueryKey = (id: string,) => {
    return [`/api/Listing/${id}`] as const;
    }

    
export const getGetApiListingIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiListingId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiListingIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiListingId>>> = ({ signal }) => getApiListingId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiListingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiListingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListingId>>>
export type GetApiListingIdQueryError = AxiosError<unknown>


export function useGetApiListingId<TData = Awaited<ReturnType<typeof getApiListingId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListingId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListingId<TData = Awaited<ReturnType<typeof getApiListingId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListingId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListingId<TData = Awaited<ReturnType<typeof getApiListingId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiListingId<TData = Awaited<ReturnType<typeof getApiListingId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiListingIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminListing = (
    upsertListingCommand: UpsertListingCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/Listing`,
      upsertListingCommand,options
    );
  }



export const getPostApiAdminListingMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListing>>, TError,{data: UpsertListingCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListing>>, TError,{data: UpsertListingCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminListing>>, {data: UpsertListingCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminListing(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminListingMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminListing>>>
    export type PostApiAdminListingMutationBody = UpsertListingCommand
    export type PostApiAdminListingMutationError = AxiosError<unknown>

    export const usePostApiAdminListing = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListing>>, TError,{data: UpsertListingCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminListing>>,
        TError,
        {data: UpsertListingCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminListingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminListing = (
    params?: GetApiAdminListingParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminListingDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Listing`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminListingQueryKey = (params?: GetApiAdminListingParams,) => {
    return [`/api/admin/Listing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminListingQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminListing>>, TError = AxiosError<unknown>>(params?: GetApiAdminListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminListingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminListing>>> = ({ signal }) => getApiAdminListing(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminListingQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminListing>>>
export type GetApiAdminListingQueryError = AxiosError<unknown>


export function useGetApiAdminListing<TData = Awaited<ReturnType<typeof getApiAdminListing>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminListingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListing>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListing<TData = Awaited<ReturnType<typeof getApiAdminListing>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListing>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListing<TData = Awaited<ReturnType<typeof getApiAdminListing>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminListing<TData = Awaited<ReturnType<typeof getApiAdminListing>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminListingQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminListingId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminListingDto>> => {
    
    return axios.get(
      `/api/admin/Listing/${id}`,options
    );
  }


export const getGetApiAdminListingIdQueryKey = (id: string,) => {
    return [`/api/admin/Listing/${id}`] as const;
    }

    
export const getGetApiAdminListingIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminListingId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminListingIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminListingId>>> = ({ signal }) => getApiAdminListingId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminListingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminListingId>>>
export type GetApiAdminListingIdQueryError = AxiosError<unknown>


export function useGetApiAdminListingId<TData = Awaited<ReturnType<typeof getApiAdminListingId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingId<TData = Awaited<ReturnType<typeof getApiAdminListingId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingId<TData = Awaited<ReturnType<typeof getApiAdminListingId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminListingId<TData = Awaited<ReturnType<typeof getApiAdminListingId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminListingIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminListingId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Listing/${id}`,options
    );
  }



export const getDeleteApiAdminListingIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminListingId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminListingId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminListingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminListingId>>>
    
    export type DeleteApiAdminListingIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminListingId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminListingId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminListingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminListingMedia = (
    upsertListingMediaCommand: UpsertListingMediaCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingMediaDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/ListingMedia`,
      upsertListingMediaCommand,options
    );
  }



export const getPostApiAdminListingMediaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingMedia>>, TError,{data: UpsertListingMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingMedia>>, TError,{data: UpsertListingMediaCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminListingMedia>>, {data: UpsertListingMediaCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminListingMedia(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminListingMediaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminListingMedia>>>
    export type PostApiAdminListingMediaMutationBody = UpsertListingMediaCommand
    export type PostApiAdminListingMediaMutationError = AxiosError<unknown>

    export const usePostApiAdminListingMedia = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingMedia>>, TError,{data: UpsertListingMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminListingMedia>>,
        TError,
        {data: UpsertListingMediaCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminListingMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminListingMedia = (
    params?: GetApiAdminListingMediaParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/ListingMedia`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminListingMediaQueryKey = (params?: GetApiAdminListingMediaParams,) => {
    return [`/api/admin/ListingMedia`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminListingMediaQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError = AxiosError<unknown>>(params?: GetApiAdminListingMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminListingMediaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminListingMedia>>> = ({ signal }) => getApiAdminListingMedia(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminListingMediaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminListingMedia>>>
export type GetApiAdminListingMediaQueryError = AxiosError<unknown>


export function useGetApiAdminListingMedia<TData = Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminListingMediaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingMedia<TData = Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingMedia<TData = Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminListingMedia<TData = Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminListingMediaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminListingMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingMediaDto>> => {
    
    return axios.get(
      `/api/admin/ListingMedia/${id}`,options
    );
  }


export const getGetApiAdminListingMediaIdQueryKey = (id: string,) => {
    return [`/api/admin/ListingMedia/${id}`] as const;
    }

    
export const getGetApiAdminListingMediaIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminListingMediaIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminListingMediaId>>> = ({ signal }) => getApiAdminListingMediaId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminListingMediaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminListingMediaId>>>
export type GetApiAdminListingMediaIdQueryError = AxiosError<unknown>


export function useGetApiAdminListingMediaId<TData = Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingMediaId<TData = Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingMediaId<TData = Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminListingMediaId<TData = Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminListingMediaIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminListingMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/ListingMedia/${id}`,options
    );
  }



export const getDeleteApiAdminListingMediaIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingMediaId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminListingMediaId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminListingMediaId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminListingMediaIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminListingMediaId>>>
    
    export type DeleteApiAdminListingMediaIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminListingMediaId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminListingMediaId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminListingMediaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminListingMediaListing = (
    params?: GetApiAdminListingMediaListingParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/ListingMedia/Listing`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminListingMediaListingQueryKey = (params?: GetApiAdminListingMediaListingParams,) => {
    return [`/api/admin/ListingMedia/Listing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminListingMediaListingQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError = AxiosError<unknown>>(params?: GetApiAdminListingMediaListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminListingMediaListingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>> = ({ signal }) => getApiAdminListingMediaListing(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminListingMediaListingQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>>
export type GetApiAdminListingMediaListingQueryError = AxiosError<unknown>


export function useGetApiAdminListingMediaListing<TData = Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminListingMediaListingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingMediaListing>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingMediaListing<TData = Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingMediaListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminListingMediaListing>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminListingMediaListing<TData = Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingMediaListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminListingMediaListing<TData = Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminListingMediaListingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminListingMediaListing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminListingMediaListingQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminListingMediaSasUrlForUpload = (
    getSasUrlForUploadListingMediaQuery: GetSasUrlForUploadListingMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/ListingMedia/SasUrlForUpload`,
      getSasUrlForUploadListingMediaQuery,options
    );
  }



export const getPostApiAdminListingMediaSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadListingMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadListingMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminListingMediaSasUrlForUpload>>, {data: GetSasUrlForUploadListingMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminListingMediaSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminListingMediaSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminListingMediaSasUrlForUpload>>>
    export type PostApiAdminListingMediaSasUrlForUploadMutationBody = GetSasUrlForUploadListingMediaQuery
    export type PostApiAdminListingMediaSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminListingMediaSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadListingMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminListingMediaSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadListingMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminListingMediaSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiListingTagListings = (
    params?: GetApiListingTagListingsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingDtoPagedResult>> => {
    
    return axios.get(
      `/api/ListingTag/Listings`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiListingTagListingsQueryKey = (params?: GetApiListingTagListingsParams,) => {
    return [`/api/ListingTag/Listings`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiListingTagListingsQueryOptions = <TData = Awaited<ReturnType<typeof getApiListingTagListings>>, TError = AxiosError<unknown>>(params?: GetApiListingTagListingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagListings>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiListingTagListingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiListingTagListings>>> = ({ signal }) => getApiListingTagListings(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagListings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiListingTagListingsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListingTagListings>>>
export type GetApiListingTagListingsQueryError = AxiosError<unknown>


export function useGetApiListingTagListings<TData = Awaited<ReturnType<typeof getApiListingTagListings>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiListingTagListingsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagListings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListingTagListings>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListingTagListings<TData = Awaited<ReturnType<typeof getApiListingTagListings>>, TError = AxiosError<unknown>>(
 params?: GetApiListingTagListingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagListings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListingTagListings>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListingTagListings<TData = Awaited<ReturnType<typeof getApiListingTagListings>>, TError = AxiosError<unknown>>(
 params?: GetApiListingTagListingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagListings>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiListingTagListings<TData = Awaited<ReturnType<typeof getApiListingTagListings>>, TError = AxiosError<unknown>>(
 params?: GetApiListingTagListingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagListings>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiListingTagListingsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiListingTagTags = (
    params?: GetApiListingTagTagsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagDtoPagedResult>> => {
    
    return axios.get(
      `/api/ListingTag/Tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiListingTagTagsQueryKey = (params?: GetApiListingTagTagsParams,) => {
    return [`/api/ListingTag/Tags`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiListingTagTagsQueryOptions = <TData = Awaited<ReturnType<typeof getApiListingTagTags>>, TError = AxiosError<unknown>>(params?: GetApiListingTagTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagTags>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiListingTagTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiListingTagTags>>> = ({ signal }) => getApiListingTagTags(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiListingTagTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListingTagTags>>>
export type GetApiListingTagTagsQueryError = AxiosError<unknown>


export function useGetApiListingTagTags<TData = Awaited<ReturnType<typeof getApiListingTagTags>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiListingTagTagsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListingTagTags>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListingTagTags<TData = Awaited<ReturnType<typeof getApiListingTagTags>>, TError = AxiosError<unknown>>(
 params?: GetApiListingTagTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiListingTagTags>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiListingTagTags<TData = Awaited<ReturnType<typeof getApiListingTagTags>>, TError = AxiosError<unknown>>(
 params?: GetApiListingTagTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagTags>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiListingTagTags<TData = Awaited<ReturnType<typeof getApiListingTagTags>>, TError = AxiosError<unknown>>(
 params?: GetApiListingTagTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiListingTagTags>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiListingTagTagsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminListingTag = (
    createListingTagCommand: CreateListingTagCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingTagDto>> => {
    
    return axios.post(
      `/api/admin/ListingTag`,
      createListingTagCommand,options
    );
  }



export const getPostApiAdminListingTagMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingTag>>, TError,{data: CreateListingTagCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingTag>>, TError,{data: CreateListingTagCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminListingTag>>, {data: CreateListingTagCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminListingTag(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminListingTagMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminListingTag>>>
    export type PostApiAdminListingTagMutationBody = CreateListingTagCommand
    export type PostApiAdminListingTagMutationError = AxiosError<unknown>

    export const usePostApiAdminListingTag = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminListingTag>>, TError,{data: CreateListingTagCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminListingTag>>,
        TError,
        {data: CreateListingTagCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminListingTagMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAdminListingTagId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListingTagDto>> => {
    
    return axios.delete(
      `/api/admin/ListingTag/${id}`,options
    );
  }



export const getDeleteApiAdminListingTagIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingTagId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingTagId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminListingTagId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminListingTagId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminListingTagIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminListingTagId>>>
    
    export type DeleteApiAdminListingTagIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminListingTagId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminListingTagId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminListingTagId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminListingTagIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiMachine = (
    params?: GetApiMachineParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineDtoPagedResult>> => {
    
    return axios.get(
      `/api/Machine`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiMachineQueryKey = (params?: GetApiMachineParams,) => {
    return [`/api/Machine`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiMachineQueryOptions = <TData = Awaited<ReturnType<typeof getApiMachine>>, TError = AxiosError<unknown>>(params?: GetApiMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachine>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMachineQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMachine>>> = ({ signal }) => getApiMachine(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMachine>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiMachineQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMachine>>>
export type GetApiMachineQueryError = AxiosError<unknown>


export function useGetApiMachine<TData = Awaited<ReturnType<typeof getApiMachine>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiMachineParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachine>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachine>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachine<TData = Awaited<ReturnType<typeof getApiMachine>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachine>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachine>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachine<TData = Awaited<ReturnType<typeof getApiMachine>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachine>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiMachine<TData = Awaited<ReturnType<typeof getApiMachine>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachine>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiMachineQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiMachineId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineDto>> => {
    
    return axios.get(
      `/api/Machine/${id}`,options
    );
  }


export const getGetApiMachineIdQueryKey = (id: string,) => {
    return [`/api/Machine/${id}`] as const;
    }

    
export const getGetApiMachineIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiMachineId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMachineIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMachineId>>> = ({ signal }) => getApiMachineId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMachineId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiMachineIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMachineId>>>
export type GetApiMachineIdQueryError = AxiosError<unknown>


export function useGetApiMachineId<TData = Awaited<ReturnType<typeof getApiMachineId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineId<TData = Awaited<ReturnType<typeof getApiMachineId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineId<TData = Awaited<ReturnType<typeof getApiMachineId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiMachineId<TData = Awaited<ReturnType<typeof getApiMachineId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiMachineIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminMachine = (
    upsertMachineCommand: UpsertMachineCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/Machine`,
      upsertMachineCommand,options
    );
  }



export const getPostApiAdminMachineMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachine>>, TError,{data: UpsertMachineCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachine>>, TError,{data: UpsertMachineCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachine>>, {data: UpsertMachineCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachine(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachine>>>
    export type PostApiAdminMachineMutationBody = UpsertMachineCommand
    export type PostApiAdminMachineMutationError = AxiosError<unknown>

    export const usePostApiAdminMachine = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachine>>, TError,{data: UpsertMachineCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachine>>,
        TError,
        {data: UpsertMachineCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAdminMachineId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Machine/${id}`,options
    );
  }



export const getDeleteApiAdminMachineIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminMachineId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminMachineId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminMachineIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminMachineId>>>
    
    export type DeleteApiAdminMachineIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminMachineId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminMachineId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminMachineIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiMachineMake = (
    params?: GetApiMachineMakeParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMakeDto[]>> => {
    
    return axios.get(
      `/api/MachineMake`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiMachineMakeQueryKey = (params?: GetApiMachineMakeParams,) => {
    return [`/api/MachineMake`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiMachineMakeQueryOptions = <TData = Awaited<ReturnType<typeof getApiMachineMake>>, TError = AxiosError<unknown>>(params?: GetApiMachineMakeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMake>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMachineMakeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMachineMake>>> = ({ signal }) => getApiMachineMake(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMake>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiMachineMakeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMachineMake>>>
export type GetApiMachineMakeQueryError = AxiosError<unknown>


export function useGetApiMachineMake<TData = Awaited<ReturnType<typeof getApiMachineMake>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiMachineMakeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMake>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineMake>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineMake<TData = Awaited<ReturnType<typeof getApiMachineMake>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineMakeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMake>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineMake>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineMake<TData = Awaited<ReturnType<typeof getApiMachineMake>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineMakeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMake>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiMachineMake<TData = Awaited<ReturnType<typeof getApiMachineMake>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineMakeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMake>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiMachineMakeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiMachineMakeId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMakeDto>> => {
    
    return axios.get(
      `/api/MachineMake/${id}`,options
    );
  }


export const getGetApiMachineMakeIdQueryKey = (id: string,) => {
    return [`/api/MachineMake/${id}`] as const;
    }

    
export const getGetApiMachineMakeIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiMachineMakeId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMakeId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMachineMakeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMachineMakeId>>> = ({ signal }) => getApiMachineMakeId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMakeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiMachineMakeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMachineMakeId>>>
export type GetApiMachineMakeIdQueryError = AxiosError<unknown>


export function useGetApiMachineMakeId<TData = Awaited<ReturnType<typeof getApiMachineMakeId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMakeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineMakeId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineMakeId<TData = Awaited<ReturnType<typeof getApiMachineMakeId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMakeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineMakeId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineMakeId<TData = Awaited<ReturnType<typeof getApiMachineMakeId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMakeId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiMachineMakeId<TData = Awaited<ReturnType<typeof getApiMachineMakeId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineMakeId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiMachineMakeIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminMachineMake = (
    upsertMachineMakeCommand: UpsertMachineMakeCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `/api/admin/MachineMake`,
      upsertMachineMakeCommand,options
    );
  }



export const getPostApiAdminMachineMakeMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMake>>, TError,{data: UpsertMachineMakeCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMake>>, TError,{data: UpsertMachineMakeCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachineMake>>, {data: UpsertMachineMakeCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachineMake(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineMakeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachineMake>>>
    export type PostApiAdminMachineMakeMutationBody = UpsertMachineMakeCommand
    export type PostApiAdminMachineMakeMutationError = AxiosError<unknown>

    export const usePostApiAdminMachineMake = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMake>>, TError,{data: UpsertMachineMakeCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachineMake>>,
        TError,
        {data: UpsertMachineMakeCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineMakeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAdminMachineMakeId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/MachineMake/${id}`,options
    );
  }



export const getDeleteApiAdminMachineMakeIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineMakeId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineMakeId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminMachineMakeId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminMachineMakeId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminMachineMakeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminMachineMakeId>>>
    
    export type DeleteApiAdminMachineMakeIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminMachineMakeId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineMakeId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminMachineMakeId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminMachineMakeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminMachineMakeSasUrlForUpload = (
    getSasUrlForUploadMachineMakeLogoQuery: GetSasUrlForUploadMachineMakeLogoQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/MachineMake/SasUrlForUpload`,
      getSasUrlForUploadMachineMakeLogoQuery,options
    );
  }



export const getPostApiAdminMachineMakeSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMakeSasUrlForUpload>>, TError,{data: GetSasUrlForUploadMachineMakeLogoQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMakeSasUrlForUpload>>, TError,{data: GetSasUrlForUploadMachineMakeLogoQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachineMakeSasUrlForUpload>>, {data: GetSasUrlForUploadMachineMakeLogoQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachineMakeSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineMakeSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachineMakeSasUrlForUpload>>>
    export type PostApiAdminMachineMakeSasUrlForUploadMutationBody = GetSasUrlForUploadMachineMakeLogoQuery
    export type PostApiAdminMachineMakeSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminMachineMakeSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMakeSasUrlForUpload>>, TError,{data: GetSasUrlForUploadMachineMakeLogoQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachineMakeSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadMachineMakeLogoQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineMakeSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminMachineMedia = (
    upsertMachineMediaCommand: UpsertMachineMediaCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMediaDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/MachineMedia`,
      upsertMachineMediaCommand,options
    );
  }



export const getPostApiAdminMachineMediaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMedia>>, TError,{data: UpsertMachineMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMedia>>, TError,{data: UpsertMachineMediaCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachineMedia>>, {data: UpsertMachineMediaCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachineMedia(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineMediaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachineMedia>>>
    export type PostApiAdminMachineMediaMutationBody = UpsertMachineMediaCommand
    export type PostApiAdminMachineMediaMutationError = AxiosError<unknown>

    export const usePostApiAdminMachineMedia = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMedia>>, TError,{data: UpsertMachineMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachineMedia>>,
        TError,
        {data: UpsertMachineMediaCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminMachineMedia = (
    params?: GetApiAdminMachineMediaParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/MachineMedia`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminMachineMediaQueryKey = (params?: GetApiAdminMachineMediaParams,) => {
    return [`/api/admin/MachineMedia`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminMachineMediaQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError = AxiosError<unknown>>(params?: GetApiAdminMachineMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminMachineMediaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminMachineMedia>>> = ({ signal }) => getApiAdminMachineMedia(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminMachineMediaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminMachineMedia>>>
export type GetApiAdminMachineMediaQueryError = AxiosError<unknown>


export function useGetApiAdminMachineMedia<TData = Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminMachineMediaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminMachineMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminMachineMedia<TData = Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminMachineMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminMachineMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminMachineMedia<TData = Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminMachineMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminMachineMedia<TData = Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminMachineMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminMachineMediaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminMachineMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMediaDto>> => {
    
    return axios.get(
      `/api/admin/MachineMedia/${id}`,options
    );
  }


export const getGetApiAdminMachineMediaIdQueryKey = (id: string,) => {
    return [`/api/admin/MachineMedia/${id}`] as const;
    }

    
export const getGetApiAdminMachineMediaIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminMachineMediaIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>> = ({ signal }) => getApiAdminMachineMediaId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminMachineMediaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>>
export type GetApiAdminMachineMediaIdQueryError = AxiosError<unknown>


export function useGetApiAdminMachineMediaId<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminMachineMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminMachineMediaId<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminMachineMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminMachineMediaId<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminMachineMediaId<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminMachineMediaIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminMachineMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/MachineMedia/${id}`,options
    );
  }



export const getDeleteApiAdminMachineMediaIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineMediaId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminMachineMediaId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminMachineMediaId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminMachineMediaIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminMachineMediaId>>>
    
    export type DeleteApiAdminMachineMediaIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminMachineMediaId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminMachineMediaId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminMachineMediaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminMachineMediaMachine = (
    params?: GetApiAdminMachineMediaMachineParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/MachineMedia/Machine`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminMachineMediaMachineQueryKey = (params?: GetApiAdminMachineMediaMachineParams,) => {
    return [`/api/admin/MachineMedia/Machine`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminMachineMediaMachineQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError = AxiosError<unknown>>(params?: GetApiAdminMachineMediaMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminMachineMediaMachineQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>> = ({ signal }) => getApiAdminMachineMediaMachine(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminMachineMediaMachineQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>>
export type GetApiAdminMachineMediaMachineQueryError = AxiosError<unknown>


export function useGetApiAdminMachineMediaMachine<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminMachineMediaMachineParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminMachineMediaMachine<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminMachineMediaMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminMachineMediaMachine<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminMachineMediaMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminMachineMediaMachine<TData = Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminMachineMediaMachineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminMachineMediaMachine>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminMachineMediaMachineQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminMachineMediaSasUrlForUpload = (
    getSasUrlForUploadRequestLogMediaQuery: GetSasUrlForUploadRequestLogMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/MachineMedia/SasUrlForUpload`,
      getSasUrlForUploadRequestLogMediaQuery,options
    );
  }



export const getPostApiAdminMachineMediaSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadRequestLogMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadRequestLogMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachineMediaSasUrlForUpload>>, {data: GetSasUrlForUploadRequestLogMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachineMediaSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineMediaSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachineMediaSasUrlForUpload>>>
    export type PostApiAdminMachineMediaSasUrlForUploadMutationBody = GetSasUrlForUploadRequestLogMediaQuery
    export type PostApiAdminMachineMediaSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminMachineMediaSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadRequestLogMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachineMediaSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadRequestLogMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineMediaSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiMachineType = (
    params?: GetApiMachineTypeParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineTypeDto[]>> => {
    
    return axios.get(
      `/api/MachineType`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiMachineTypeQueryKey = (params?: GetApiMachineTypeParams,) => {
    return [`/api/MachineType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiMachineTypeQueryOptions = <TData = Awaited<ReturnType<typeof getApiMachineType>>, TError = AxiosError<unknown>>(params?: GetApiMachineTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineType>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMachineTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMachineType>>> = ({ signal }) => getApiMachineType(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMachineType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiMachineTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMachineType>>>
export type GetApiMachineTypeQueryError = AxiosError<unknown>


export function useGetApiMachineType<TData = Awaited<ReturnType<typeof getApiMachineType>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiMachineTypeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineType>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineType<TData = Awaited<ReturnType<typeof getApiMachineType>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineType>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineType<TData = Awaited<ReturnType<typeof getApiMachineType>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineType>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiMachineType<TData = Awaited<ReturnType<typeof getApiMachineType>>, TError = AxiosError<unknown>>(
 params?: GetApiMachineTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineType>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiMachineTypeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiMachineTypeId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MachineTypeDto>> => {
    
    return axios.get(
      `/api/MachineType/${id}`,options
    );
  }


export const getGetApiMachineTypeIdQueryKey = (id: string,) => {
    return [`/api/MachineType/${id}`] as const;
    }

    
export const getGetApiMachineTypeIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiMachineTypeId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineTypeId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiMachineTypeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMachineTypeId>>> = ({ signal }) => getApiMachineTypeId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMachineTypeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiMachineTypeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMachineTypeId>>>
export type GetApiMachineTypeIdQueryError = AxiosError<unknown>


export function useGetApiMachineTypeId<TData = Awaited<ReturnType<typeof getApiMachineTypeId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineTypeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineTypeId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineTypeId<TData = Awaited<ReturnType<typeof getApiMachineTypeId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineTypeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiMachineTypeId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiMachineTypeId<TData = Awaited<ReturnType<typeof getApiMachineTypeId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineTypeId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiMachineTypeId<TData = Awaited<ReturnType<typeof getApiMachineTypeId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMachineTypeId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiMachineTypeIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminMachineType = (
    upsertMachineTypeCommand: UpsertMachineTypeCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `/api/admin/MachineType`,
      upsertMachineTypeCommand,options
    );
  }



export const getPostApiAdminMachineTypeMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineType>>, TError,{data: UpsertMachineTypeCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineType>>, TError,{data: UpsertMachineTypeCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachineType>>, {data: UpsertMachineTypeCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachineType(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachineType>>>
    export type PostApiAdminMachineTypeMutationBody = UpsertMachineTypeCommand
    export type PostApiAdminMachineTypeMutationError = AxiosError<unknown>

    export const usePostApiAdminMachineType = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineType>>, TError,{data: UpsertMachineTypeCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachineType>>,
        TError,
        {data: UpsertMachineTypeCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAdminMachineTypeId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/MachineType/${id}`,options
    );
  }



export const getDeleteApiAdminMachineTypeIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineTypeId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineTypeId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminMachineTypeId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminMachineTypeId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminMachineTypeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminMachineTypeId>>>
    
    export type DeleteApiAdminMachineTypeIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminMachineTypeId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminMachineTypeId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminMachineTypeId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminMachineTypeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminMachineTypeSasUrlForUpload = (
    getSasUrlForUploadMachineTypeIconQuery: GetSasUrlForUploadMachineTypeIconQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/MachineType/SasUrlForUpload`,
      getSasUrlForUploadMachineTypeIconQuery,options
    );
  }



export const getPostApiAdminMachineTypeSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineTypeSasUrlForUpload>>, TError,{data: GetSasUrlForUploadMachineTypeIconQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineTypeSasUrlForUpload>>, TError,{data: GetSasUrlForUploadMachineTypeIconQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminMachineTypeSasUrlForUpload>>, {data: GetSasUrlForUploadMachineTypeIconQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminMachineTypeSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminMachineTypeSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminMachineTypeSasUrlForUpload>>>
    export type PostApiAdminMachineTypeSasUrlForUploadMutationBody = GetSasUrlForUploadMachineTypeIconQuery
    export type PostApiAdminMachineTypeSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminMachineTypeSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminMachineTypeSasUrlForUpload>>, TError,{data: GetSasUrlForUploadMachineTypeIconQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminMachineTypeSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadMachineTypeIconQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminMachineTypeSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiNotificationSend = (
    notificationRequestDto: NotificationRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `/api/Notification/send`,
      notificationRequestDto,options
    );
  }



export const getPostApiNotificationSendMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNotificationSend>>, TError,{data: NotificationRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiNotificationSend>>, TError,{data: NotificationRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiNotificationSend>>, {data: NotificationRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiNotificationSend(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiNotificationSendMutationResult = NonNullable<Awaited<ReturnType<typeof postApiNotificationSend>>>
    export type PostApiNotificationSendMutationBody = NotificationRequestDto
    export type PostApiNotificationSendMutationError = AxiosError<unknown>

    export const usePostApiNotificationSend = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNotificationSend>>, TError,{data: NotificationRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiNotificationSend>>,
        TError,
        {data: NotificationRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiNotificationSendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiNotificationSendToTopic = (
    topicNotificationRequestDto: TopicNotificationRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `/api/Notification/sendToTopic`,
      topicNotificationRequestDto,options
    );
  }



export const getPostApiNotificationSendToTopicMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNotificationSendToTopic>>, TError,{data: TopicNotificationRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiNotificationSendToTopic>>, TError,{data: TopicNotificationRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiNotificationSendToTopic>>, {data: TopicNotificationRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiNotificationSendToTopic(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiNotificationSendToTopicMutationResult = NonNullable<Awaited<ReturnType<typeof postApiNotificationSendToTopic>>>
    export type PostApiNotificationSendToTopicMutationBody = TopicNotificationRequestDto
    export type PostApiNotificationSendToTopicMutationError = AxiosError<unknown>

    export const usePostApiNotificationSendToTopic = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNotificationSendToTopic>>, TError,{data: TopicNotificationRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiNotificationSendToTopic>>,
        TError,
        {data: TopicNotificationRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiNotificationSendToTopicMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiNotification = (
    params?: GetApiNotificationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NotificationDtoPagedResult>> => {
    
    return axios.get(
      `/api/Notification`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiNotificationQueryKey = (params?: GetApiNotificationParams,) => {
    return [`/api/Notification`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiNotificationQueryOptions = <TData = Awaited<ReturnType<typeof getApiNotification>>, TError = AxiosError<unknown>>(params?: GetApiNotificationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotification>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiNotificationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiNotification>>> = ({ signal }) => getApiNotification(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiNotification>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiNotificationQueryResult = NonNullable<Awaited<ReturnType<typeof getApiNotification>>>
export type GetApiNotificationQueryError = AxiosError<unknown>


export function useGetApiNotification<TData = Awaited<ReturnType<typeof getApiNotification>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiNotificationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotification>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiNotification>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiNotification<TData = Awaited<ReturnType<typeof getApiNotification>>, TError = AxiosError<unknown>>(
 params?: GetApiNotificationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotification>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiNotification>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiNotification<TData = Awaited<ReturnType<typeof getApiNotification>>, TError = AxiosError<unknown>>(
 params?: GetApiNotificationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotification>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiNotification<TData = Awaited<ReturnType<typeof getApiNotification>>, TError = AxiosError<unknown>>(
 params?: GetApiNotificationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotification>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiNotificationQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiOtpGenerateOtpForRegistration = (
    generateOtpForRegistrationDto: GenerateOtpForRegistrationDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Otp/GenerateOtpForRegistration`,
      generateOtpForRegistrationDto,options
    );
  }



export const getPostApiOtpGenerateOtpForRegistrationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOtpGenerateOtpForRegistration>>, TError,{data: GenerateOtpForRegistrationDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOtpGenerateOtpForRegistration>>, TError,{data: GenerateOtpForRegistrationDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOtpGenerateOtpForRegistration>>, {data: GenerateOtpForRegistrationDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiOtpGenerateOtpForRegistration(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOtpGenerateOtpForRegistrationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOtpGenerateOtpForRegistration>>>
    export type PostApiOtpGenerateOtpForRegistrationMutationBody = GenerateOtpForRegistrationDto
    export type PostApiOtpGenerateOtpForRegistrationMutationError = AxiosError<unknown>

    export const usePostApiOtpGenerateOtpForRegistration = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOtpGenerateOtpForRegistration>>, TError,{data: GenerateOtpForRegistrationDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiOtpGenerateOtpForRegistration>>,
        TError,
        {data: GenerateOtpForRegistrationDto},
        TContext
      > => {

      const mutationOptions = getPostApiOtpGenerateOtpForRegistrationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiOtpVerifyOtpForRegistration = (
    verifyOtpDto: VerifyOtpDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Otp/VerifyOtpForRegistration`,
      verifyOtpDto,options
    );
  }



export const getPostApiOtpVerifyOtpForRegistrationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOtpVerifyOtpForRegistration>>, TError,{data: VerifyOtpDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOtpVerifyOtpForRegistration>>, TError,{data: VerifyOtpDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOtpVerifyOtpForRegistration>>, {data: VerifyOtpDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiOtpVerifyOtpForRegistration(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOtpVerifyOtpForRegistrationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOtpVerifyOtpForRegistration>>>
    export type PostApiOtpVerifyOtpForRegistrationMutationBody = VerifyOtpDto
    export type PostApiOtpVerifyOtpForRegistrationMutationError = AxiosError<unknown>

    export const usePostApiOtpVerifyOtpForRegistration = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOtpVerifyOtpForRegistration>>, TError,{data: VerifyOtpDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiOtpVerifyOtpForRegistration>>,
        TError,
        {data: VerifyOtpDto},
        TContext
      > => {

      const mutationOptions = getPostApiOtpVerifyOtpForRegistrationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiOtpGenerateOtpForAccountDeletion = (
    generateOtpForRegistrationDto: GenerateOtpForRegistrationDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/Otp/GenerateOtpForAccountDeletion`,
      generateOtpForRegistrationDto,options
    );
  }



export const getPostApiOtpGenerateOtpForAccountDeletionMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOtpGenerateOtpForAccountDeletion>>, TError,{data: GenerateOtpForRegistrationDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOtpGenerateOtpForAccountDeletion>>, TError,{data: GenerateOtpForRegistrationDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOtpGenerateOtpForAccountDeletion>>, {data: GenerateOtpForRegistrationDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiOtpGenerateOtpForAccountDeletion(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOtpGenerateOtpForAccountDeletionMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOtpGenerateOtpForAccountDeletion>>>
    export type PostApiOtpGenerateOtpForAccountDeletionMutationBody = GenerateOtpForRegistrationDto
    export type PostApiOtpGenerateOtpForAccountDeletionMutationError = AxiosError<unknown>

    export const usePostApiOtpGenerateOtpForAccountDeletion = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOtpGenerateOtpForAccountDeletion>>, TError,{data: GenerateOtpForRegistrationDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiOtpGenerateOtpForAccountDeletion>>,
        TError,
        {data: GenerateOtpForRegistrationDto},
        TContext
      > => {

      const mutationOptions = getPostApiOtpGenerateOtpForAccountDeletionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiPurchase = (
    params?: GetApiPurchaseParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PurchaseDtoPagedResult>> => {
    
    return axios.get(
      `/api/Purchase`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiPurchaseQueryKey = (params?: GetApiPurchaseParams,) => {
    return [`/api/Purchase`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPurchaseQueryOptions = <TData = Awaited<ReturnType<typeof getApiPurchase>>, TError = AxiosError<unknown>>(params?: GetApiPurchaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchase>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPurchaseQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPurchase>>> = ({ signal }) => getApiPurchase(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPurchase>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiPurchaseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPurchase>>>
export type GetApiPurchaseQueryError = AxiosError<unknown>


export function useGetApiPurchase<TData = Awaited<ReturnType<typeof getApiPurchase>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiPurchaseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchase>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPurchase>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiPurchase<TData = Awaited<ReturnType<typeof getApiPurchase>>, TError = AxiosError<unknown>>(
 params?: GetApiPurchaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchase>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPurchase>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiPurchase<TData = Awaited<ReturnType<typeof getApiPurchase>>, TError = AxiosError<unknown>>(
 params?: GetApiPurchaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchase>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiPurchase<TData = Awaited<ReturnType<typeof getApiPurchase>>, TError = AxiosError<unknown>>(
 params?: GetApiPurchaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchase>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiPurchaseQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPurchaseId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PurchaseDto>> => {
    
    return axios.get(
      `/api/Purchase/${id}`,options
    );
  }


export const getGetApiPurchaseIdQueryKey = (id: string,) => {
    return [`/api/Purchase/${id}`] as const;
    }

    
export const getGetApiPurchaseIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPurchaseId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchaseId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPurchaseIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPurchaseId>>> = ({ signal }) => getApiPurchaseId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPurchaseId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiPurchaseIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPurchaseId>>>
export type GetApiPurchaseIdQueryError = AxiosError<unknown>


export function useGetApiPurchaseId<TData = Awaited<ReturnType<typeof getApiPurchaseId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchaseId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPurchaseId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiPurchaseId<TData = Awaited<ReturnType<typeof getApiPurchaseId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchaseId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPurchaseId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiPurchaseId<TData = Awaited<ReturnType<typeof getApiPurchaseId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchaseId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiPurchaseId<TData = Awaited<ReturnType<typeof getApiPurchaseId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPurchaseId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiPurchaseIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRequestEnquiry = (
    createEnquiryCommand: CreateEnquiryCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Request/Enquiry`,
      createEnquiryCommand,options
    );
  }



export const getPostApiRequestEnquiryMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestEnquiry>>, TError,{data: CreateEnquiryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRequestEnquiry>>, TError,{data: CreateEnquiryCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRequestEnquiry>>, {data: CreateEnquiryCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRequestEnquiry(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRequestEnquiryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRequestEnquiry>>>
    export type PostApiRequestEnquiryMutationBody = CreateEnquiryCommand
    export type PostApiRequestEnquiryMutationError = AxiosError<unknown>

    export const usePostApiRequestEnquiry = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestEnquiry>>, TError,{data: CreateEnquiryCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRequestEnquiry>>,
        TError,
        {data: CreateEnquiryCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRequestEnquiryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiRequestInsurance = (
    createInsuranceRequestCommand: CreateInsuranceRequestCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Request/Insurance`,
      createInsuranceRequestCommand,options
    );
  }



export const getPostApiRequestInsuranceMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestInsurance>>, TError,{data: CreateInsuranceRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRequestInsurance>>, TError,{data: CreateInsuranceRequestCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRequestInsurance>>, {data: CreateInsuranceRequestCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRequestInsurance(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRequestInsuranceMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRequestInsurance>>>
    export type PostApiRequestInsuranceMutationBody = CreateInsuranceRequestCommand
    export type PostApiRequestInsuranceMutationError = AxiosError<unknown>

    export const usePostApiRequestInsurance = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestInsurance>>, TError,{data: CreateInsuranceRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRequestInsurance>>,
        TError,
        {data: CreateInsuranceRequestCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRequestInsuranceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiRequestDealer = (
    createDealerRequestCommand: CreateDealerRequestCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Request/Dealer`,
      createDealerRequestCommand,options
    );
  }



export const getPostApiRequestDealerMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestDealer>>, TError,{data: CreateDealerRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRequestDealer>>, TError,{data: CreateDealerRequestCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRequestDealer>>, {data: CreateDealerRequestCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRequestDealer(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRequestDealerMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRequestDealer>>>
    export type PostApiRequestDealerMutationBody = CreateDealerRequestCommand
    export type PostApiRequestDealerMutationError = AxiosError<unknown>

    export const usePostApiRequestDealer = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestDealer>>, TError,{data: CreateDealerRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRequestDealer>>,
        TError,
        {data: CreateDealerRequestCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRequestDealerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiRequestCollaborator = (
    createCollaboratorRequestCommand: CreateCollaboratorRequestCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Request/Collaborator`,
      createCollaboratorRequestCommand,options
    );
  }



export const getPostApiRequestCollaboratorMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestCollaborator>>, TError,{data: CreateCollaboratorRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRequestCollaborator>>, TError,{data: CreateCollaboratorRequestCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRequestCollaborator>>, {data: CreateCollaboratorRequestCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRequestCollaborator(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRequestCollaboratorMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRequestCollaborator>>>
    export type PostApiRequestCollaboratorMutationBody = CreateCollaboratorRequestCommand
    export type PostApiRequestCollaboratorMutationError = AxiosError<unknown>

    export const usePostApiRequestCollaborator = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestCollaborator>>, TError,{data: CreateCollaboratorRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRequestCollaborator>>,
        TError,
        {data: CreateCollaboratorRequestCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRequestCollaboratorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiRequestBuyRent = (
    createBuyRentRequestCommand: CreateBuyRentRequestCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Request/BuyRent`,
      createBuyRentRequestCommand,options
    );
  }



export const getPostApiRequestBuyRentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestBuyRent>>, TError,{data: CreateBuyRentRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRequestBuyRent>>, TError,{data: CreateBuyRentRequestCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRequestBuyRent>>, {data: CreateBuyRentRequestCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRequestBuyRent(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRequestBuyRentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRequestBuyRent>>>
    export type PostApiRequestBuyRentMutationBody = CreateBuyRentRequestCommand
    export type PostApiRequestBuyRentMutationError = AxiosError<unknown>

    export const usePostApiRequestBuyRent = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestBuyRent>>, TError,{data: CreateBuyRentRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRequestBuyRent>>,
        TError,
        {data: CreateBuyRentRequestCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRequestBuyRentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiRequestSellRent = (
    createSellRentRequestCommand: CreateSellRentRequestCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/Request/SellRent`,
      createSellRentRequestCommand,options
    );
  }



export const getPostApiRequestSellRentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestSellRent>>, TError,{data: CreateSellRentRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRequestSellRent>>, TError,{data: CreateSellRentRequestCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRequestSellRent>>, {data: CreateSellRentRequestCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRequestSellRent(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRequestSellRentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRequestSellRent>>>
    export type PostApiRequestSellRentMutationBody = CreateSellRentRequestCommand
    export type PostApiRequestSellRentMutationError = AxiosError<unknown>

    export const usePostApiRequestSellRent = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRequestSellRent>>, TError,{data: CreateSellRentRequestCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRequestSellRent>>,
        TError,
        {data: CreateSellRentRequestCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRequestSellRentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiRequest = (
    params?: GetApiRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDtoPagedResult>> => {
    
    return axios.get(
      `/api/Request`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiRequestQueryKey = (params?: GetApiRequestParams,) => {
    return [`/api/Request`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRequestQueryOptions = <TData = Awaited<ReturnType<typeof getApiRequest>>, TError = AxiosError<unknown>>(params?: GetApiRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequest>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRequestQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRequest>>> = ({ signal }) => getApiRequest(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiRequestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRequest>>>
export type GetApiRequestQueryError = AxiosError<unknown>


export function useGetApiRequest<TData = Awaited<ReturnType<typeof getApiRequest>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiRequestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiRequest<TData = Awaited<ReturnType<typeof getApiRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiRequest<TData = Awaited<ReturnType<typeof getApiRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiRequest<TData = Awaited<ReturnType<typeof getApiRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiRequestQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRequestId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto>> => {
    
    return axios.get(
      `/api/Request/${id}`,options
    );
  }


export const getGetApiRequestIdQueryKey = (id: string,) => {
    return [`/api/Request/${id}`] as const;
    }

    
export const getGetApiRequestIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRequestId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequestId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRequestIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRequestId>>> = ({ signal }) => getApiRequestId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRequestId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiRequestIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRequestId>>>
export type GetApiRequestIdQueryError = AxiosError<unknown>


export function useGetApiRequestId<TData = Awaited<ReturnType<typeof getApiRequestId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequestId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRequestId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiRequestId<TData = Awaited<ReturnType<typeof getApiRequestId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequestId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRequestId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiRequestId<TData = Awaited<ReturnType<typeof getApiRequestId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequestId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiRequestId<TData = Awaited<ReturnType<typeof getApiRequestId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRequestId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiRequestIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequest = (
    params?: GetApiAdminRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestQueryKey = (params?: GetApiAdminRequestParams,) => {
    return [`/api/admin/Request`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequest>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequest>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequest>>> = ({ signal }) => getApiAdminRequest(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequest>>>
export type GetApiAdminRequestQueryError = AxiosError<unknown>


export function useGetApiAdminRequest<TData = Awaited<ReturnType<typeof getApiAdminRequest>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequest<TData = Awaited<ReturnType<typeof getApiAdminRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequest>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequest<TData = Awaited<ReturnType<typeof getApiAdminRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequest<TData = Awaited<ReturnType<typeof getApiAdminRequest>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequest>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestCollaborator = (
    params?: GetApiAdminRequestCollaboratorParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request/Collaborator`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestCollaboratorQueryKey = (params?: GetApiAdminRequestCollaboratorParams,) => {
    return [`/api/admin/Request/Collaborator`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestCollaboratorQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestCollaboratorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>> = ({ signal }) => getApiAdminRequestCollaborator(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestCollaboratorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>>
export type GetApiAdminRequestCollaboratorQueryError = AxiosError<unknown>


export function useGetApiAdminRequestCollaborator<TData = Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestCollaboratorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestCollaborator<TData = Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestCollaborator<TData = Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestCollaborator<TData = Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestCollaboratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestCollaborator>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestCollaboratorQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestInsurance = (
    params?: GetApiAdminRequestInsuranceParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request/Insurance`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestInsuranceQueryKey = (params?: GetApiAdminRequestInsuranceParams,) => {
    return [`/api/admin/Request/Insurance`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestInsuranceQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestInsuranceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestInsuranceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>> = ({ signal }) => getApiAdminRequestInsurance(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestInsuranceQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>>
export type GetApiAdminRequestInsuranceQueryError = AxiosError<unknown>


export function useGetApiAdminRequestInsurance<TData = Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestInsuranceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestInsurance>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestInsurance<TData = Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestInsuranceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestInsurance>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestInsurance<TData = Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestInsuranceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestInsurance<TData = Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestInsuranceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestInsurance>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestInsuranceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestDealer = (
    params?: GetApiAdminRequestDealerParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request/Dealer`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestDealerQueryKey = (params?: GetApiAdminRequestDealerParams,) => {
    return [`/api/admin/Request/Dealer`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestDealerQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestDealerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestDealerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestDealer>>> = ({ signal }) => getApiAdminRequestDealer(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestDealerQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestDealer>>>
export type GetApiAdminRequestDealerQueryError = AxiosError<unknown>


export function useGetApiAdminRequestDealer<TData = Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestDealerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestDealer>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestDealer<TData = Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestDealerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestDealer>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestDealer<TData = Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestDealerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestDealer<TData = Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestDealerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestDealer>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestDealerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestEnquiry = (
    params?: GetApiAdminRequestEnquiryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request/Enquiry`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestEnquiryQueryKey = (params?: GetApiAdminRequestEnquiryParams,) => {
    return [`/api/admin/Request/Enquiry`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestEnquiryQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestEnquiryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestEnquiryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>> = ({ signal }) => getApiAdminRequestEnquiry(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestEnquiryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>>
export type GetApiAdminRequestEnquiryQueryError = AxiosError<unknown>


export function useGetApiAdminRequestEnquiry<TData = Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestEnquiryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestEnquiry<TData = Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestEnquiryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestEnquiry<TData = Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestEnquiryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestEnquiry<TData = Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestEnquiryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestEnquiry>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestEnquiryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestBuyRent = (
    params?: GetApiAdminRequestBuyRentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request/BuyRent`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestBuyRentQueryKey = (params?: GetApiAdminRequestBuyRentParams,) => {
    return [`/api/admin/Request/BuyRent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestBuyRentQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestBuyRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestBuyRentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>> = ({ signal }) => getApiAdminRequestBuyRent(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestBuyRentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>>
export type GetApiAdminRequestBuyRentQueryError = AxiosError<unknown>


export function useGetApiAdminRequestBuyRent<TData = Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestBuyRentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestBuyRent<TData = Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestBuyRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestBuyRent<TData = Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestBuyRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestBuyRent<TData = Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestBuyRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestBuyRent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestBuyRentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestSellRent = (
    params?: GetApiAdminRequestSellRentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto[]>> => {
    
    return axios.get(
      `/api/admin/Request/SellRent`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestSellRentQueryKey = (params?: GetApiAdminRequestSellRentParams,) => {
    return [`/api/admin/Request/SellRent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestSellRentQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestSellRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestSellRentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>> = ({ signal }) => getApiAdminRequestSellRent(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestSellRentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>>
export type GetApiAdminRequestSellRentQueryError = AxiosError<unknown>


export function useGetApiAdminRequestSellRent<TData = Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestSellRentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestSellRent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestSellRent<TData = Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestSellRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestSellRent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestSellRent<TData = Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestSellRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestSellRent<TData = Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestSellRentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestSellRent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestSellRentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestDto>> => {
    
    return axios.get(
      `/api/admin/Request/${id}`,options
    );
  }


export const getGetApiAdminRequestIdQueryKey = (id: string,) => {
    return [`/api/admin/Request/${id}`] as const;
    }

    
export const getGetApiAdminRequestIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestId>>> = ({ signal }) => getApiAdminRequestId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestId>>>
export type GetApiAdminRequestIdQueryError = AxiosError<unknown>


export function useGetApiAdminRequestId<TData = Awaited<ReturnType<typeof getApiAdminRequestId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestId<TData = Awaited<ReturnType<typeof getApiAdminRequestId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestId<TData = Awaited<ReturnType<typeof getApiAdminRequestId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestId<TData = Awaited<ReturnType<typeof getApiAdminRequestId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminRequestId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Request/${id}`,options
    );
  }



export const getDeleteApiAdminRequestIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminRequestId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminRequestId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminRequestIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminRequestId>>>
    
    export type DeleteApiAdminRequestIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminRequestId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminRequestId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminRequestIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminRequestLog = (
    createRequestLogCommand: CreateRequestLogCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogDto>> => {
    
    return axios.post(
      `/api/admin/RequestLog`,
      createRequestLogCommand,options
    );
  }



export const getPostApiAdminRequestLogMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLog>>, TError,{data: CreateRequestLogCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLog>>, TError,{data: CreateRequestLogCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminRequestLog>>, {data: CreateRequestLogCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminRequestLog(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminRequestLogMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminRequestLog>>>
    export type PostApiAdminRequestLogMutationBody = CreateRequestLogCommand
    export type PostApiAdminRequestLogMutationError = AxiosError<unknown>

    export const usePostApiAdminRequestLog = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLog>>, TError,{data: CreateRequestLogCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminRequestLog>>,
        TError,
        {data: CreateRequestLogCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminRequestLogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminRequestLog = (
    params?: GetApiAdminRequestLogParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/RequestLog`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestLogQueryKey = (params?: GetApiAdminRequestLogParams,) => {
    return [`/api/admin/RequestLog`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestLogQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestLogQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestLog>>> = ({ signal }) => getApiAdminRequestLog(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestLogQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestLog>>>
export type GetApiAdminRequestLogQueryError = AxiosError<unknown>


export function useGetApiAdminRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestLogParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLog>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLog>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLog>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestLogQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestLogId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogDto>> => {
    
    return axios.get(
      `/api/admin/RequestLog/${id}`,options
    );
  }


export const getGetApiAdminRequestLogIdQueryKey = (id: string,) => {
    return [`/api/admin/RequestLog/${id}`] as const;
    }

    
export const getGetApiAdminRequestLogIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestLogIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestLogId>>> = ({ signal }) => getApiAdminRequestLogId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestLogIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestLogId>>>
export type GetApiAdminRequestLogIdQueryError = AxiosError<unknown>


export function useGetApiAdminRequestLogId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestLogId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestLogIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminRequestLogId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/RequestLog/${id}`,options
    );
  }



export const getDeleteApiAdminRequestLogIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestLogId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestLogId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminRequestLogId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminRequestLogId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminRequestLogIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminRequestLogId>>>
    
    export type DeleteApiAdminRequestLogIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminRequestLogId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestLogId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminRequestLogId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminRequestLogIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminRequestLogMedia = (
    upsertRequestLogMediaCommand: UpsertRequestLogMediaCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogMediaDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/admin/RequestLogMedia`,
      upsertRequestLogMediaCommand,options
    );
  }



export const getPostApiAdminRequestLogMediaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLogMedia>>, TError,{data: UpsertRequestLogMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLogMedia>>, TError,{data: UpsertRequestLogMediaCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminRequestLogMedia>>, {data: UpsertRequestLogMediaCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminRequestLogMedia(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminRequestLogMediaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminRequestLogMedia>>>
    export type PostApiAdminRequestLogMediaMutationBody = UpsertRequestLogMediaCommand
    export type PostApiAdminRequestLogMediaMutationError = AxiosError<unknown>

    export const usePostApiAdminRequestLogMedia = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLogMedia>>, TError,{data: UpsertRequestLogMediaCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminRequestLogMedia>>,
        TError,
        {data: UpsertRequestLogMediaCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminRequestLogMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminRequestLogMedia = (
    params?: GetApiAdminRequestLogMediaParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/RequestLogMedia`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestLogMediaQueryKey = (params?: GetApiAdminRequestLogMediaParams,) => {
    return [`/api/admin/RequestLogMedia`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestLogMediaQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestLogMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestLogMediaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>> = ({ signal }) => getApiAdminRequestLogMedia(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestLogMediaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>>
export type GetApiAdminRequestLogMediaQueryError = AxiosError<unknown>


export function useGetApiAdminRequestLogMedia<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestLogMediaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogMedia<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogMedia<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestLogMedia<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestLogMediaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminRequestLogMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogMediaDto>> => {
    
    return axios.get(
      `/api/admin/RequestLogMedia/${id}`,options
    );
  }


export const getGetApiAdminRequestLogMediaIdQueryKey = (id: string,) => {
    return [`/api/admin/RequestLogMedia/${id}`] as const;
    }

    
export const getGetApiAdminRequestLogMediaIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestLogMediaIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>> = ({ signal }) => getApiAdminRequestLogMediaId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestLogMediaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>>
export type GetApiAdminRequestLogMediaIdQueryError = AxiosError<unknown>


export function useGetApiAdminRequestLogMediaId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogMediaId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogMediaId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestLogMediaId<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestLogMediaIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminRequestLogMediaId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/RequestLogMedia/${id}`,options
    );
  }



export const getDeleteApiAdminRequestLogMediaIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestLogMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestLogMediaId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminRequestLogMediaId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminRequestLogMediaId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminRequestLogMediaIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminRequestLogMediaId>>>
    
    export type DeleteApiAdminRequestLogMediaIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminRequestLogMediaId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminRequestLogMediaId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminRequestLogMediaId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminRequestLogMediaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminRequestLogMediaRequestLog = (
    params?: GetApiAdminRequestLogMediaRequestLogParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RequestLogMediaDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/RequestLogMedia/RequestLog`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminRequestLogMediaRequestLogQueryKey = (params?: GetApiAdminRequestLogMediaRequestLogParams,) => {
    return [`/api/admin/RequestLogMedia/RequestLog`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminRequestLogMediaRequestLogQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError = AxiosError<unknown>>(params?: GetApiAdminRequestLogMediaRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminRequestLogMediaRequestLogQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>> = ({ signal }) => getApiAdminRequestLogMediaRequestLog(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminRequestLogMediaRequestLogQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>>
export type GetApiAdminRequestLogMediaRequestLogQueryError = AxiosError<unknown>


export function useGetApiAdminRequestLogMediaRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminRequestLogMediaRequestLogParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogMediaRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogMediaRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminRequestLogMediaRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogMediaRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminRequestLogMediaRequestLog<TData = Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminRequestLogMediaRequestLogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminRequestLogMediaRequestLog>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminRequestLogMediaRequestLogQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAdminRequestLogMediaSasUrlForUpload = (
    getSasUrlForUploadRequestLogMediaQuery: GetSasUrlForUploadRequestLogMediaQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/admin/RequestLogMedia/SasUrlForUpload`,
      getSasUrlForUploadRequestLogMediaQuery,options
    );
  }



export const getPostApiAdminRequestLogMediaSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLogMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadRequestLogMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLogMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadRequestLogMediaQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminRequestLogMediaSasUrlForUpload>>, {data: GetSasUrlForUploadRequestLogMediaQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminRequestLogMediaSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminRequestLogMediaSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminRequestLogMediaSasUrlForUpload>>>
    export type PostApiAdminRequestLogMediaSasUrlForUploadMutationBody = GetSasUrlForUploadRequestLogMediaQuery
    export type PostApiAdminRequestLogMediaSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiAdminRequestLogMediaSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminRequestLogMediaSasUrlForUpload>>, TError,{data: GetSasUrlForUploadRequestLogMediaQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminRequestLogMediaSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadRequestLogMediaQuery},
        TContext
      > => {

      const mutationOptions = getPostApiAdminRequestLogMediaSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminTag = (
    upsertTagCommand: UpsertTagCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagDto>> => {
    
    return axios.post(
      `/api/admin/Tag`,
      upsertTagCommand,options
    );
  }



export const getPostApiAdminTagMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminTag>>, TError,{data: UpsertTagCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminTag>>, TError,{data: UpsertTagCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminTag>>, {data: UpsertTagCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminTag(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminTagMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminTag>>>
    export type PostApiAdminTagMutationBody = UpsertTagCommand
    export type PostApiAdminTagMutationError = AxiosError<unknown>

    export const usePostApiAdminTag = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminTag>>, TError,{data: UpsertTagCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminTag>>,
        TError,
        {data: UpsertTagCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminTagMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminTag = (
    params?: GetApiAdminTagParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/Tag`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminTagQueryKey = (params?: GetApiAdminTagParams,) => {
    return [`/api/admin/Tag`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminTagQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminTag>>, TError = AxiosError<unknown>>(params?: GetApiAdminTagParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTag>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminTagQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminTag>>> = ({ signal }) => getApiAdminTag(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTag>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminTagQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminTag>>>
export type GetApiAdminTagQueryError = AxiosError<unknown>


export function useGetApiAdminTag<TData = Awaited<ReturnType<typeof getApiAdminTag>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminTagParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTag>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminTag>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminTag<TData = Awaited<ReturnType<typeof getApiAdminTag>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminTagParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTag>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminTag>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminTag<TData = Awaited<ReturnType<typeof getApiAdminTag>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminTagParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTag>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminTag<TData = Awaited<ReturnType<typeof getApiAdminTag>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminTagParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTag>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminTagQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminTagId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagDto>> => {
    
    return axios.get(
      `/api/admin/Tag/${id}`,options
    );
  }


export const getGetApiAdminTagIdQueryKey = (id: string,) => {
    return [`/api/admin/Tag/${id}`] as const;
    }

    
export const getGetApiAdminTagIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminTagId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTagId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminTagIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminTagId>>> = ({ signal }) => getApiAdminTagId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTagId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminTagIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminTagId>>>
export type GetApiAdminTagIdQueryError = AxiosError<unknown>


export function useGetApiAdminTagId<TData = Awaited<ReturnType<typeof getApiAdminTagId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTagId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminTagId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminTagId<TData = Awaited<ReturnType<typeof getApiAdminTagId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTagId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminTagId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminTagId<TData = Awaited<ReturnType<typeof getApiAdminTagId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTagId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminTagId<TData = Awaited<ReturnType<typeof getApiAdminTagId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminTagId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminTagIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminTagId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/Tag/${id}`,options
    );
  }



export const getDeleteApiAdminTagIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminTagId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminTagId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminTagId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminTagId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminTagIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminTagId>>>
    
    export type DeleteApiAdminTagIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminTagId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminTagId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminTagId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminTagIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiUserProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfileDtoDataResponseDto>> => {
    
    return axios.get(
      `/api/User/Profile`,options
    );
  }


export const getGetApiUserProfileQueryKey = () => {
    return [`/api/User/Profile`] as const;
    }

    
export const getGetApiUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserProfile>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserProfile>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserProfile>>> = ({ signal }) => getApiUserProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserProfile>>>
export type GetApiUserProfileQueryError = AxiosError<unknown>


export function useGetApiUserProfile<TData = Awaited<ReturnType<typeof getApiUserProfile>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserProfile>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiUserProfile<TData = Awaited<ReturnType<typeof getApiUserProfile>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserProfile>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiUserProfile<TData = Awaited<ReturnType<typeof getApiUserProfile>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserProfile>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiUserProfile<TData = Awaited<ReturnType<typeof getApiUserProfile>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserProfile>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiUserProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiUserProfile = (
    updateUserProfileCommand: UpdateUserProfileCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfileDtoDataResponseDto>> => {
    
    return axios.put(
      `/api/User/Profile`,
      updateUserProfileCommand,options
    );
  }



export const getPutApiUserProfileMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserProfile>>, TError,{data: UpdateUserProfileCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserProfile>>, TError,{data: UpdateUserProfileCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserProfile>>, {data: UpdateUserProfileCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserProfile(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserProfile>>>
    export type PutApiUserProfileMutationBody = UpdateUserProfileCommand
    export type PutApiUserProfileMutationError = AxiosError<unknown>

    export const usePutApiUserProfile = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserProfile>>, TError,{data: UpdateUserProfileCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putApiUserProfile>>,
        TError,
        {data: UpdateUserProfileCommand},
        TContext
      > => {

      const mutationOptions = getPutApiUserProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiUserSasUrlForUpload = (
    getSasUrlForUploadProfilePictureQuery: GetSasUrlForUploadProfilePictureQuery, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SasUploadMediaDto>> => {
    
    return axios.post(
      `/api/User/SasUrlForUpload`,
      getSasUrlForUploadProfilePictureQuery,options
    );
  }



export const getPostApiUserSasUrlForUploadMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserSasUrlForUpload>>, TError,{data: GetSasUrlForUploadProfilePictureQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserSasUrlForUpload>>, TError,{data: GetSasUrlForUploadProfilePictureQuery}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserSasUrlForUpload>>, {data: GetSasUrlForUploadProfilePictureQuery}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserSasUrlForUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUserSasUrlForUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserSasUrlForUpload>>>
    export type PostApiUserSasUrlForUploadMutationBody = GetSasUrlForUploadProfilePictureQuery
    export type PostApiUserSasUrlForUploadMutationError = AxiosError<unknown>

    export const usePostApiUserSasUrlForUpload = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserSasUrlForUpload>>, TError,{data: GetSasUrlForUploadProfilePictureQuery}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiUserSasUrlForUpload>>,
        TError,
        {data: GetSasUrlForUploadProfilePictureQuery},
        TContext
      > => {

      const mutationOptions = getPostApiUserSasUrlForUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiUser = (
    deleteAccountCommand: DeleteAccountCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<boolean>> => {
    
    return axios.delete(
      `/api/User`,{data:
      deleteAccountCommand, ...options}
    );
  }



export const getDeleteApiUserMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUser>>, TError,{data: DeleteAccountCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUser>>, TError,{data: DeleteAccountCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUser>>, {data: DeleteAccountCommand}> = (props) => {
          const {data} = props ?? {};

          return  deleteApiUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUser>>>
    export type DeleteApiUserMutationBody = DeleteAccountCommand
    export type DeleteApiUserMutationError = AxiosError<unknown>

    export const useDeleteApiUser = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUser>>, TError,{data: DeleteAccountCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUser>>,
        TError,
        {data: DeleteAccountCommand},
        TContext
      > => {

      const mutationOptions = getDeleteApiUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminUserUserRole = (
    assignUserRoleCommand: AssignUserRoleCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/admin/User/UserRole`,
      assignUserRoleCommand,options
    );
  }



export const getPostApiAdminUserUserRoleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminUserUserRole>>, TError,{data: AssignUserRoleCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminUserUserRole>>, TError,{data: AssignUserRoleCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminUserUserRole>>, {data: AssignUserRoleCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminUserUserRole(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminUserUserRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminUserUserRole>>>
    export type PostApiAdminUserUserRoleMutationBody = AssignUserRoleCommand
    export type PostApiAdminUserUserRoleMutationError = AxiosError<unknown>

    export const usePostApiAdminUserUserRole = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminUserUserRole>>, TError,{data: AssignUserRoleCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminUserUserRole>>,
        TError,
        {data: AssignUserRoleCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminUserUserRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiAdminUserUserRoleUnassign = (
    unassignUserRoleCommand: UnassignUserRoleCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ResponseDto>> => {
    
    return axios.post(
      `/api/admin/User/UserRole/Unassign`,
      unassignUserRoleCommand,options
    );
  }



export const getPostApiAdminUserUserRoleUnassignMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminUserUserRoleUnassign>>, TError,{data: UnassignUserRoleCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdminUserUserRoleUnassign>>, TError,{data: UnassignUserRoleCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdminUserUserRoleUnassign>>, {data: UnassignUserRoleCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdminUserUserRoleUnassign(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAdminUserUserRoleUnassignMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdminUserUserRoleUnassign>>>
    export type PostApiAdminUserUserRoleUnassignMutationBody = UnassignUserRoleCommand
    export type PostApiAdminUserUserRoleUnassignMutationError = AxiosError<unknown>

    export const usePostApiAdminUserUserRoleUnassign = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdminUserUserRoleUnassign>>, TError,{data: UnassignUserRoleCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAdminUserUserRoleUnassign>>,
        TError,
        {data: UnassignUserRoleCommand},
        TContext
      > => {

      const mutationOptions = getPostApiAdminUserUserRoleUnassignMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiAdminUser = (
    params?: GetApiAdminUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDtoPagedResult>> => {
    
    return axios.get(
      `/api/admin/User`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiAdminUserQueryKey = (params?: GetApiAdminUserParams,) => {
    return [`/api/admin/User`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAdminUserQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminUser>>, TError = AxiosError<unknown>>(params?: GetApiAdminUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUser>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminUser>>> = ({ signal }) => getApiAdminUser(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminUserQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminUser>>>
export type GetApiAdminUserQueryError = AxiosError<unknown>


export function useGetApiAdminUser<TData = Awaited<ReturnType<typeof getApiAdminUser>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiAdminUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUser>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminUser<TData = Awaited<ReturnType<typeof getApiAdminUser>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUser>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminUser<TData = Awaited<ReturnType<typeof getApiAdminUser>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUser>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminUser<TData = Awaited<ReturnType<typeof getApiAdminUser>>, TError = AxiosError<unknown>>(
 params?: GetApiAdminUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUser>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAdminUserId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    
    return axios.get(
      `/api/admin/User/${id}`,options
    );
  }


export const getGetApiAdminUserIdQueryKey = (id: string,) => {
    return [`/api/admin/User/${id}`] as const;
    }

    
export const getGetApiAdminUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminUserIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminUserId>>> = ({ signal }) => getApiAdminUserId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiAdminUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminUserId>>>
export type GetApiAdminUserIdQueryError = AxiosError<unknown>


export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUserId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUserId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiAdminUserIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiAdminUserId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/admin/User/${id}`,options
    );
  }



export const getDeleteApiAdminUserIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminUserId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminUserId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminUserId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAdminUserId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminUserId>>>
    
    export type DeleteApiAdminUserIdMutationError = AxiosError<unknown>

    export const useDeleteApiAdminUserId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminUserId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminUserId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiUserFavourite = (
    addUserFavouriteCommand: AddUserFavouriteCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserFavouriteDtoDataResponseDto>> => {
    
    return axios.post(
      `/api/UserFavourite`,
      addUserFavouriteCommand,options
    );
  }



export const getPostApiUserFavouriteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserFavourite>>, TError,{data: AddUserFavouriteCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserFavourite>>, TError,{data: AddUserFavouriteCommand}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserFavourite>>, {data: AddUserFavouriteCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserFavourite(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUserFavouriteMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserFavourite>>>
    export type PostApiUserFavouriteMutationBody = AddUserFavouriteCommand
    export type PostApiUserFavouriteMutationError = AxiosError<unknown>

    export const usePostApiUserFavourite = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserFavourite>>, TError,{data: AddUserFavouriteCommand}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiUserFavourite>>,
        TError,
        {data: AddUserFavouriteCommand},
        TContext
      > => {

      const mutationOptions = getPostApiUserFavouriteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiUserFavourite = (
    params?: GetApiUserFavouriteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserFavouriteDtoPagedResult>> => {
    
    return axios.get(
      `/api/UserFavourite`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUserFavouriteQueryKey = (params?: GetApiUserFavouriteParams,) => {
    return [`/api/UserFavourite`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUserFavouriteQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserFavourite>>, TError = AxiosError<unknown>>(params?: GetApiUserFavouriteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserFavourite>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserFavouriteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserFavourite>>> = ({ signal }) => getApiUserFavourite(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserFavourite>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiUserFavouriteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserFavourite>>>
export type GetApiUserFavouriteQueryError = AxiosError<unknown>


export function useGetApiUserFavourite<TData = Awaited<ReturnType<typeof getApiUserFavourite>>, TError = AxiosError<unknown>>(
 params: undefined |  GetApiUserFavouriteParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserFavourite>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserFavourite>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiUserFavourite<TData = Awaited<ReturnType<typeof getApiUserFavourite>>, TError = AxiosError<unknown>>(
 params?: GetApiUserFavouriteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserFavourite>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserFavourite>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiUserFavourite<TData = Awaited<ReturnType<typeof getApiUserFavourite>>, TError = AxiosError<unknown>>(
 params?: GetApiUserFavouriteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserFavourite>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiUserFavourite<TData = Awaited<ReturnType<typeof getApiUserFavourite>>, TError = AxiosError<unknown>>(
 params?: GetApiUserFavouriteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserFavourite>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiUserFavouriteQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiUserFavouriteId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/UserFavourite/${id}`,options
    );
  }



export const getDeleteApiUserFavouriteIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserFavouriteId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserFavouriteId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUserFavouriteId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUserFavouriteId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUserFavouriteIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUserFavouriteId>>>
    
    export type DeleteApiUserFavouriteIdMutationError = AxiosError<unknown>

    export const useDeleteApiUserFavouriteId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserFavouriteId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUserFavouriteId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiUserFavouriteIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiUserFavouriteListingListingId = (
    listingId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/UserFavourite/Listing/${listingId}`,options
    );
  }



export const getDeleteApiUserFavouriteListingListingIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserFavouriteListingListingId>>, TError,{listingId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserFavouriteListingListingId>>, TError,{listingId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUserFavouriteListingListingId>>, {listingId: string}> = (props) => {
          const {listingId} = props ?? {};

          return  deleteApiUserFavouriteListingListingId(listingId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUserFavouriteListingListingIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUserFavouriteListingListingId>>>
    
    export type DeleteApiUserFavouriteListingListingIdMutationError = AxiosError<unknown>

    export const useDeleteApiUserFavouriteListingListingId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserFavouriteListingListingId>>, TError,{listingId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUserFavouriteListingListingId>>,
        TError,
        {listingId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiUserFavouriteListingListingIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
